# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from ..types.search_runs_response_dto import SearchRunsResponseDto
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.run_response_dto import RunResponseDto
from ..core.client_wrapper import AsyncClientWrapper


class DeprecatedClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_search_runs_get(
        self,
        *,
        filter: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        run_view_type: typing.Optional[str] = None,
        max_results: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchRunsResponseDto:
        """
        Parameters
        ----------
        filter : typing.Optional[str]

        page_token : typing.Optional[str]

        offset : typing.Optional[int]

        run_view_type : typing.Optional[str]

        max_results : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchRunsResponseDto
            Successful Response

        Examples
        --------
        from truefoundry import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.deprecated.get_search_runs_get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/ml/api/2.0/preview/mlflow/runs/search",
            method="GET",
            params={
                "filter": filter,
                "page_token": page_token,
                "offset": offset,
                "run_view_type": run_view_type,
                "max_results": max_results,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SearchRunsResponseDto,
                    parse_obj_as(
                        type_=SearchRunsResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_run_by_name_get(
        self,
        *,
        run_name: str,
        experiment_id: typing.Optional[str] = None,
        experiment_name: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RunResponseDto:
        """
        Get Run by run name

        Parameters
        ----------
        run_name : str

        experiment_id : typing.Optional[str]

        experiment_name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RunResponseDto
            Successful Response

        Examples
        --------
        from truefoundry import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.deprecated.get_run_by_name_get(
            run_name="run_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/ml/api/2.0mlflow/runs/get-by-name",
            method="GET",
            params={
                "run_name": run_name,
                "experiment_id": experiment_id,
                "experiment_name": experiment_name,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    RunResponseDto,
                    parse_obj_as(
                        type_=RunResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDeprecatedClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_search_runs_get(
        self,
        *,
        filter: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        run_view_type: typing.Optional[str] = None,
        max_results: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchRunsResponseDto:
        """
        Parameters
        ----------
        filter : typing.Optional[str]

        page_token : typing.Optional[str]

        offset : typing.Optional[int]

        run_view_type : typing.Optional[str]

        max_results : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchRunsResponseDto
            Successful Response

        Examples
        --------
        import asyncio

        from truefoundry import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.deprecated.get_search_runs_get()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/ml/api/2.0/preview/mlflow/runs/search",
            method="GET",
            params={
                "filter": filter,
                "page_token": page_token,
                "offset": offset,
                "run_view_type": run_view_type,
                "max_results": max_results,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SearchRunsResponseDto,
                    parse_obj_as(
                        type_=SearchRunsResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_run_by_name_get(
        self,
        *,
        run_name: str,
        experiment_id: typing.Optional[str] = None,
        experiment_name: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RunResponseDto:
        """
        Get Run by run name

        Parameters
        ----------
        run_name : str

        experiment_id : typing.Optional[str]

        experiment_name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RunResponseDto
            Successful Response

        Examples
        --------
        import asyncio

        from truefoundry import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.deprecated.get_run_by_name_get(
                run_name="run_name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/ml/api/2.0mlflow/runs/get-by-name",
            method="GET",
            params={
                "run_name": run_name,
                "experiment_id": experiment_id,
                "experiment_name": experiment_name,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    RunResponseDto,
                    parse_obj_as(
                        type_=RunResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
