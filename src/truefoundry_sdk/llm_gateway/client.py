# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.metadata_item import MetadataItem
from .raw_client import AsyncRawLlmGatewayClient, RawLlmGatewayClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class LlmGatewayClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawLlmGatewayClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawLlmGatewayClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawLlmGatewayClient
        """
        return self._raw_client

    def svc_metrics_get_llm_playground_tables(
        self,
        *,
        start_ts: typing.Optional[str] = OMIT,
        end_ts: typing.Optional[str] = OMIT,
        model_names: typing.Optional[typing.Sequence[str]] = OMIT,
        usernames: typing.Optional[typing.Sequence[str]] = OMIT,
        metadata: typing.Optional[typing.Sequence[MetadataItem]] = OMIT,
        utc_offset_seconds: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        start_ts : typing.Optional[str]
            Start Timestamp in milliseconds

        end_ts : typing.Optional[str]
            End Timestamp in milliseconds

        model_names : typing.Optional[typing.Sequence[str]]
            Model Names

        usernames : typing.Optional[typing.Sequence[str]]
            Usernames

        metadata : typing.Optional[typing.Sequence[MetadataItem]]

        utc_offset_seconds : typing.Optional[str]
            UTC Offset in seconds

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from truefoundry_sdk import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.llm_gateway.svc_metrics_get_llm_playground_tables()
        """
        _response = self._raw_client.svc_metrics_get_llm_playground_tables(
            start_ts=start_ts,
            end_ts=end_ts,
            model_names=model_names,
            usernames=usernames,
            metadata=metadata,
            utc_offset_seconds=utc_offset_seconds,
            request_options=request_options,
        )
        return _response.data

    def svc_inference_request_get_filter_type_and_label_values(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from truefoundry_sdk import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.llm_gateway.svc_inference_request_get_filter_type_and_label_values()
        """
        _response = self._raw_client.svc_inference_request_get_filter_type_and_label_values(
            request_options=request_options
        )
        return _response.data


class AsyncLlmGatewayClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawLlmGatewayClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawLlmGatewayClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawLlmGatewayClient
        """
        return self._raw_client

    async def svc_metrics_get_llm_playground_tables(
        self,
        *,
        start_ts: typing.Optional[str] = OMIT,
        end_ts: typing.Optional[str] = OMIT,
        model_names: typing.Optional[typing.Sequence[str]] = OMIT,
        usernames: typing.Optional[typing.Sequence[str]] = OMIT,
        metadata: typing.Optional[typing.Sequence[MetadataItem]] = OMIT,
        utc_offset_seconds: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        start_ts : typing.Optional[str]
            Start Timestamp in milliseconds

        end_ts : typing.Optional[str]
            End Timestamp in milliseconds

        model_names : typing.Optional[typing.Sequence[str]]
            Model Names

        usernames : typing.Optional[typing.Sequence[str]]
            Usernames

        metadata : typing.Optional[typing.Sequence[MetadataItem]]

        utc_offset_seconds : typing.Optional[str]
            UTC Offset in seconds

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.llm_gateway.svc_metrics_get_llm_playground_tables()


        asyncio.run(main())
        """
        _response = await self._raw_client.svc_metrics_get_llm_playground_tables(
            start_ts=start_ts,
            end_ts=end_ts,
            model_names=model_names,
            usernames=usernames,
            metadata=metadata,
            utc_offset_seconds=utc_offset_seconds,
            request_options=request_options,
        )
        return _response.data

    async def svc_inference_request_get_filter_type_and_label_values(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.llm_gateway.svc_inference_request_get_filter_type_and_label_values()


        asyncio.run(main())
        """
        _response = await self._raw_client.svc_inference_request_get_filter_type_and_label_values(
            request_options=request_options
        )
        return _response.data
