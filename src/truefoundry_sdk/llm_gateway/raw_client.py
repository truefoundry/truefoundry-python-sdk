# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..types.guardrail_meters_response_dto import GuardrailMetersResponseDto
from ..types.guardrail_metrics_charts_response_dto import GuardrailMetricsChartsResponseDto
from ..types.guardrail_metrics_filters_response_dto import GuardrailMetricsFiltersResponseDto
from ..types.mcp_meters_response_dto import McpMetersResponseDto
from ..types.mcp_metrics_charts_response_dto import McpMetricsChartsResponseDto
from ..types.mcp_metrics_filters_response_dto import McpMetricsFiltersResponseDto
from ..types.metadata_item import MetadataItem
from .types.guardrail_meters_request_dto_filters_value import GuardrailMetersRequestDtoFiltersValue
from .types.guardrail_metrics_charts_data_request_dto_chart_name import GuardrailMetricsChartsDataRequestDtoChartName
from .types.guardrail_metrics_charts_data_request_dto_filters_value import (
    GuardrailMetricsChartsDataRequestDtoFiltersValue,
)
from .types.mcp_meters_request_dto_filters_value import McpMetersRequestDtoFiltersValue
from .types.mcp_meters_request_dto_page import McpMetersRequestDtoPage
from .types.mcp_metrics_charts_data_request_dto_chart_name import McpMetricsChartsDataRequestDtoChartName
from .types.mcp_metrics_charts_data_request_dto_filters_value import McpMetricsChartsDataRequestDtoFiltersValue
from .types.svc_mcp_metrics_get_mcp_metrics_charts_request_page import SvcMcpMetricsGetMcpMetricsChartsRequestPage
from .types.svc_mcp_metrics_get_mcp_metrics_filters_request_page import SvcMcpMetricsGetMcpMetricsFiltersRequestPage

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawLlmGatewayClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def svc_metrics_get_llm_playground_tables(
        self,
        *,
        start_ts: typing.Optional[str] = OMIT,
        end_ts: typing.Optional[str] = OMIT,
        model_names: typing.Optional[typing.Sequence[str]] = OMIT,
        usernames: typing.Optional[typing.Sequence[str]] = OMIT,
        metadata: typing.Optional[typing.Sequence[MetadataItem]] = OMIT,
        utc_offset_seconds: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        start_ts : typing.Optional[str]
            Start Timestamp in milliseconds

        end_ts : typing.Optional[str]
            End Timestamp in milliseconds

        model_names : typing.Optional[typing.Sequence[str]]
            Model Names

        usernames : typing.Optional[typing.Sequence[str]]
            Usernames

        metadata : typing.Optional[typing.Sequence[MetadataItem]]

        utc_offset_seconds : typing.Optional[str]
            UTC Offset in seconds

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/metrics/tables",
            method="POST",
            json={
                "startTs": start_ts,
                "endTs": end_ts,
                "modelNames": model_names,
                "usernames": usernames,
                "metadata": convert_and_respect_annotation_metadata(
                    object_=metadata, annotation=typing.Sequence[MetadataItem], direction="write"
                ),
                "utcOffsetSeconds": utc_offset_seconds,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def svc_inference_request_get_filter_type_and_label_values(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/requests/column-details",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def svc_mcp_metrics_get_mcp_metrics_charts(
        self,
        *,
        page: SvcMcpMetricsGetMcpMetricsChartsRequestPage,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[McpMetricsChartsResponseDto]:
        """
        Retrieves available MCP metrics charts.

        Parameters
        ----------
        page : SvcMcpMetricsGetMcpMetricsChartsRequestPage
            Page type. Possible values: "mcpserver" or "tool"

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[McpMetricsChartsResponseDto]
            Available MCP metrics charts
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/mcp-metrics/charts",
            method="GET",
            params={
                "page": page,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    McpMetricsChartsResponseDto,
                    parse_obj_as(
                        type_=McpMetricsChartsResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def svc_mcp_metrics_get_mcp_metrics_filters(
        self,
        *,
        start_time: int,
        end_time: int,
        page: SvcMcpMetricsGetMcpMetricsFiltersRequestPage,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[McpMetricsFiltersResponseDto]:
        """
        Retrieves available MCP metrics filters.

        Parameters
        ----------
        start_time : int
            Start time in epoch seconds (e.g., 1710201609)

        end_time : int
            End time in epoch seconds (e.g., 1710202200)

        page : SvcMcpMetricsGetMcpMetricsFiltersRequestPage
            Page type. Possible values: "mcpserver" or "tool"

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[McpMetricsFiltersResponseDto]
            Available MCP metrics filters
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/mcp-metrics/filters",
            method="GET",
            params={
                "startTime": start_time,
                "endTime": end_time,
                "page": page,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    McpMetricsFiltersResponseDto,
                    parse_obj_as(
                        type_=McpMetricsFiltersResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def svc_mcp_metrics_get_mcp_meters(
        self,
        *,
        page: McpMetersRequestDtoPage,
        start_time: typing.Optional[int] = OMIT,
        end_time: typing.Optional[int] = OMIT,
        filters: typing.Optional[typing.Dict[str, McpMetersRequestDtoFiltersValue]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[McpMetersResponseDto]:
        """
        Retrieves aggregated MCP metrics data.

        Parameters
        ----------
        page : McpMetersRequestDtoPage
            Page type. Possible values: "mcpserver" or "tool"

        start_time : typing.Optional[int]
            Start time in epoch seconds (e.g., 1710201609)

        end_time : typing.Optional[int]
            End time in epoch seconds (e.g., 1710202200)

        filters : typing.Optional[typing.Dict[str, McpMetersRequestDtoFiltersValue]]
            Map of filterName → filter object

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[McpMetersResponseDto]
            Aggregated MCP metrics data
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/mcp-metrics/meters",
            method="POST",
            json={
                "startTime": start_time,
                "endTime": end_time,
                "filters": convert_and_respect_annotation_metadata(
                    object_=filters, annotation=typing.Dict[str, McpMetersRequestDtoFiltersValue], direction="write"
                ),
                "page": page,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    McpMetersResponseDto,
                    parse_obj_as(
                        type_=McpMetersResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def svc_mcp_metrics_get_mcp_metrics_charts_data(
        self,
        *,
        start_time: int,
        end_time: int,
        chart_name: McpMetricsChartsDataRequestDtoChartName,
        filters: typing.Optional[typing.Dict[str, McpMetricsChartsDataRequestDtoFiltersValue]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Retrieves available MCP metrics charts.

        Parameters
        ----------
        start_time : int
            Start time in epoch seconds (e.g., 1710201609)

        end_time : int
            End time in epoch seconds (e.g., 1710202200)

        chart_name : McpMetricsChartsDataRequestDtoChartName
            Chart name

        filters : typing.Optional[typing.Dict[str, McpMetricsChartsDataRequestDtoFiltersValue]]
            Map of filterName → filter object

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/mcp-metrics/chartsData",
            method="POST",
            json={
                "startTime": start_time,
                "endTime": end_time,
                "filters": convert_and_respect_annotation_metadata(
                    object_=filters,
                    annotation=typing.Dict[str, McpMetricsChartsDataRequestDtoFiltersValue],
                    direction="write",
                ),
                "chartName": chart_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def svc_guardrail_metrics_get_guardrail_metrics_charts(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GuardrailMetricsChartsResponseDto]:
        """
        Retrieves available Guardrail metrics charts.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GuardrailMetricsChartsResponseDto]
            Available Guardrail metrics charts
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/guardrail-metrics/charts",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GuardrailMetricsChartsResponseDto,
                    parse_obj_as(
                        type_=GuardrailMetricsChartsResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def svc_guardrail_metrics_get_guardrail_metrics_filters(
        self, *, start_time: int, end_time: int, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GuardrailMetricsFiltersResponseDto]:
        """
        Retrieves available Guardrail metrics filters.

        Parameters
        ----------
        start_time : int
            Start time in epoch seconds (e.g., 1710201609)

        end_time : int
            End time in epoch seconds (e.g., 1710202200)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GuardrailMetricsFiltersResponseDto]
            Available Guardrail metrics filters
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/guardrail-metrics/filters",
            method="GET",
            params={
                "startTime": start_time,
                "endTime": end_time,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GuardrailMetricsFiltersResponseDto,
                    parse_obj_as(
                        type_=GuardrailMetricsFiltersResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def svc_guardrail_metrics_get_guardrail_meters(
        self,
        *,
        start_time: typing.Optional[int] = OMIT,
        end_time: typing.Optional[int] = OMIT,
        filters: typing.Optional[typing.Dict[str, GuardrailMetersRequestDtoFiltersValue]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[GuardrailMetersResponseDto]:
        """
        Retrieves aggregated Guardrail metrics data.

        Parameters
        ----------
        start_time : typing.Optional[int]
            Start time in epoch seconds (e.g., 1710201609)

        end_time : typing.Optional[int]
            End time in epoch seconds (e.g., 1710202200)

        filters : typing.Optional[typing.Dict[str, GuardrailMetersRequestDtoFiltersValue]]
            Map of filterName → filter object

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GuardrailMetersResponseDto]
            Aggregated Guardrail metrics data
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/guardrail-metrics/meters",
            method="POST",
            json={
                "startTime": start_time,
                "endTime": end_time,
                "filters": convert_and_respect_annotation_metadata(
                    object_=filters,
                    annotation=typing.Dict[str, GuardrailMetersRequestDtoFiltersValue],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GuardrailMetersResponseDto,
                    parse_obj_as(
                        type_=GuardrailMetersResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def svc_guardrail_metrics_get_guardrail_metrics_charts_data(
        self,
        *,
        start_time: int,
        end_time: int,
        chart_name: GuardrailMetricsChartsDataRequestDtoChartName,
        filters: typing.Optional[typing.Dict[str, GuardrailMetricsChartsDataRequestDtoFiltersValue]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Retrieves Guardrail metrics charts data.

        Parameters
        ----------
        start_time : int
            Start time in epoch seconds (e.g., 1710201609)

        end_time : int
            End time in epoch seconds (e.g., 1710202200)

        chart_name : GuardrailMetricsChartsDataRequestDtoChartName
            Chart name

        filters : typing.Optional[typing.Dict[str, GuardrailMetricsChartsDataRequestDtoFiltersValue]]
            Map of filterName → filter object

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/guardrail-metrics/chartsData",
            method="POST",
            json={
                "startTime": start_time,
                "endTime": end_time,
                "filters": convert_and_respect_annotation_metadata(
                    object_=filters,
                    annotation=typing.Dict[str, GuardrailMetricsChartsDataRequestDtoFiltersValue],
                    direction="write",
                ),
                "chartName": chart_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawLlmGatewayClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def svc_metrics_get_llm_playground_tables(
        self,
        *,
        start_ts: typing.Optional[str] = OMIT,
        end_ts: typing.Optional[str] = OMIT,
        model_names: typing.Optional[typing.Sequence[str]] = OMIT,
        usernames: typing.Optional[typing.Sequence[str]] = OMIT,
        metadata: typing.Optional[typing.Sequence[MetadataItem]] = OMIT,
        utc_offset_seconds: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        start_ts : typing.Optional[str]
            Start Timestamp in milliseconds

        end_ts : typing.Optional[str]
            End Timestamp in milliseconds

        model_names : typing.Optional[typing.Sequence[str]]
            Model Names

        usernames : typing.Optional[typing.Sequence[str]]
            Usernames

        metadata : typing.Optional[typing.Sequence[MetadataItem]]

        utc_offset_seconds : typing.Optional[str]
            UTC Offset in seconds

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/metrics/tables",
            method="POST",
            json={
                "startTs": start_ts,
                "endTs": end_ts,
                "modelNames": model_names,
                "usernames": usernames,
                "metadata": convert_and_respect_annotation_metadata(
                    object_=metadata, annotation=typing.Sequence[MetadataItem], direction="write"
                ),
                "utcOffsetSeconds": utc_offset_seconds,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def svc_inference_request_get_filter_type_and_label_values(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/requests/column-details",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def svc_mcp_metrics_get_mcp_metrics_charts(
        self,
        *,
        page: SvcMcpMetricsGetMcpMetricsChartsRequestPage,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[McpMetricsChartsResponseDto]:
        """
        Retrieves available MCP metrics charts.

        Parameters
        ----------
        page : SvcMcpMetricsGetMcpMetricsChartsRequestPage
            Page type. Possible values: "mcpserver" or "tool"

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[McpMetricsChartsResponseDto]
            Available MCP metrics charts
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/mcp-metrics/charts",
            method="GET",
            params={
                "page": page,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    McpMetricsChartsResponseDto,
                    parse_obj_as(
                        type_=McpMetricsChartsResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def svc_mcp_metrics_get_mcp_metrics_filters(
        self,
        *,
        start_time: int,
        end_time: int,
        page: SvcMcpMetricsGetMcpMetricsFiltersRequestPage,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[McpMetricsFiltersResponseDto]:
        """
        Retrieves available MCP metrics filters.

        Parameters
        ----------
        start_time : int
            Start time in epoch seconds (e.g., 1710201609)

        end_time : int
            End time in epoch seconds (e.g., 1710202200)

        page : SvcMcpMetricsGetMcpMetricsFiltersRequestPage
            Page type. Possible values: "mcpserver" or "tool"

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[McpMetricsFiltersResponseDto]
            Available MCP metrics filters
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/mcp-metrics/filters",
            method="GET",
            params={
                "startTime": start_time,
                "endTime": end_time,
                "page": page,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    McpMetricsFiltersResponseDto,
                    parse_obj_as(
                        type_=McpMetricsFiltersResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def svc_mcp_metrics_get_mcp_meters(
        self,
        *,
        page: McpMetersRequestDtoPage,
        start_time: typing.Optional[int] = OMIT,
        end_time: typing.Optional[int] = OMIT,
        filters: typing.Optional[typing.Dict[str, McpMetersRequestDtoFiltersValue]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[McpMetersResponseDto]:
        """
        Retrieves aggregated MCP metrics data.

        Parameters
        ----------
        page : McpMetersRequestDtoPage
            Page type. Possible values: "mcpserver" or "tool"

        start_time : typing.Optional[int]
            Start time in epoch seconds (e.g., 1710201609)

        end_time : typing.Optional[int]
            End time in epoch seconds (e.g., 1710202200)

        filters : typing.Optional[typing.Dict[str, McpMetersRequestDtoFiltersValue]]
            Map of filterName → filter object

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[McpMetersResponseDto]
            Aggregated MCP metrics data
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/mcp-metrics/meters",
            method="POST",
            json={
                "startTime": start_time,
                "endTime": end_time,
                "filters": convert_and_respect_annotation_metadata(
                    object_=filters, annotation=typing.Dict[str, McpMetersRequestDtoFiltersValue], direction="write"
                ),
                "page": page,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    McpMetersResponseDto,
                    parse_obj_as(
                        type_=McpMetersResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def svc_mcp_metrics_get_mcp_metrics_charts_data(
        self,
        *,
        start_time: int,
        end_time: int,
        chart_name: McpMetricsChartsDataRequestDtoChartName,
        filters: typing.Optional[typing.Dict[str, McpMetricsChartsDataRequestDtoFiltersValue]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Retrieves available MCP metrics charts.

        Parameters
        ----------
        start_time : int
            Start time in epoch seconds (e.g., 1710201609)

        end_time : int
            End time in epoch seconds (e.g., 1710202200)

        chart_name : McpMetricsChartsDataRequestDtoChartName
            Chart name

        filters : typing.Optional[typing.Dict[str, McpMetricsChartsDataRequestDtoFiltersValue]]
            Map of filterName → filter object

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/mcp-metrics/chartsData",
            method="POST",
            json={
                "startTime": start_time,
                "endTime": end_time,
                "filters": convert_and_respect_annotation_metadata(
                    object_=filters,
                    annotation=typing.Dict[str, McpMetricsChartsDataRequestDtoFiltersValue],
                    direction="write",
                ),
                "chartName": chart_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def svc_guardrail_metrics_get_guardrail_metrics_charts(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GuardrailMetricsChartsResponseDto]:
        """
        Retrieves available Guardrail metrics charts.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GuardrailMetricsChartsResponseDto]
            Available Guardrail metrics charts
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/guardrail-metrics/charts",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GuardrailMetricsChartsResponseDto,
                    parse_obj_as(
                        type_=GuardrailMetricsChartsResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def svc_guardrail_metrics_get_guardrail_metrics_filters(
        self, *, start_time: int, end_time: int, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GuardrailMetricsFiltersResponseDto]:
        """
        Retrieves available Guardrail metrics filters.

        Parameters
        ----------
        start_time : int
            Start time in epoch seconds (e.g., 1710201609)

        end_time : int
            End time in epoch seconds (e.g., 1710202200)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GuardrailMetricsFiltersResponseDto]
            Available Guardrail metrics filters
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/guardrail-metrics/filters",
            method="GET",
            params={
                "startTime": start_time,
                "endTime": end_time,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GuardrailMetricsFiltersResponseDto,
                    parse_obj_as(
                        type_=GuardrailMetricsFiltersResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def svc_guardrail_metrics_get_guardrail_meters(
        self,
        *,
        start_time: typing.Optional[int] = OMIT,
        end_time: typing.Optional[int] = OMIT,
        filters: typing.Optional[typing.Dict[str, GuardrailMetersRequestDtoFiltersValue]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[GuardrailMetersResponseDto]:
        """
        Retrieves aggregated Guardrail metrics data.

        Parameters
        ----------
        start_time : typing.Optional[int]
            Start time in epoch seconds (e.g., 1710201609)

        end_time : typing.Optional[int]
            End time in epoch seconds (e.g., 1710202200)

        filters : typing.Optional[typing.Dict[str, GuardrailMetersRequestDtoFiltersValue]]
            Map of filterName → filter object

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GuardrailMetersResponseDto]
            Aggregated Guardrail metrics data
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/guardrail-metrics/meters",
            method="POST",
            json={
                "startTime": start_time,
                "endTime": end_time,
                "filters": convert_and_respect_annotation_metadata(
                    object_=filters,
                    annotation=typing.Dict[str, GuardrailMetersRequestDtoFiltersValue],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    GuardrailMetersResponseDto,
                    parse_obj_as(
                        type_=GuardrailMetersResponseDto,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def svc_guardrail_metrics_get_guardrail_metrics_charts_data(
        self,
        *,
        start_time: int,
        end_time: int,
        chart_name: GuardrailMetricsChartsDataRequestDtoChartName,
        filters: typing.Optional[typing.Dict[str, GuardrailMetricsChartsDataRequestDtoFiltersValue]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Retrieves Guardrail metrics charts data.

        Parameters
        ----------
        start_time : int
            Start time in epoch seconds (e.g., 1710201609)

        end_time : int
            End time in epoch seconds (e.g., 1710202200)

        chart_name : GuardrailMetricsChartsDataRequestDtoChartName
            Chart name

        filters : typing.Optional[typing.Dict[str, GuardrailMetricsChartsDataRequestDtoFiltersValue]]
            Map of filterName → filter object

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/llm-gateway/guardrail-metrics/chartsData",
            method="POST",
            json={
                "startTime": start_time,
                "endTime": end_time,
                "filters": convert_and_respect_annotation_metadata(
                    object_=filters,
                    annotation=typing.Dict[str, GuardrailMetricsChartsDataRequestDtoFiltersValue],
                    direction="write",
                ),
                "chartName": chart_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
