# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from .base_artifact_version import BaseArtifactVersion
from .chat_message_turn import ChatMessageTurn
from .model_configuration import ModelConfiguration
from .tool_schema import ToolSchema


class ChatPromptManifest(BaseArtifactVersion):
    """
    +label=Chat Prompt
    +usage=Fill in the information for opening a new chat prompt
    """

    type: typing.Literal["chat_prompt"] = "chat_prompt"
    messages: typing.Optional[typing.List[ChatMessageTurn]] = pydantic.Field(default=None)
    """
    +sort=4000
    +label=Messages in the chat conversation
    +usage=List of messages in the chat conversation, must be non-empty
    """

    variables: typing.Optional[typing.Dict[str, typing.Optional[str]]] = pydantic.Field(default=None)
    """
    +label=Variables
    +usage=Variables referenced in messages and that can be replaced when running generation
    +sort=5000
    """

    model_configuration: typing.Optional[ModelConfiguration] = None
    tools: typing.Optional[typing.List[ToolSchema]] = pydantic.Field(default=None)
    """
    +label=Tools
    +usage=List of tools to be used in the chat prompt
    +sort=7000
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
