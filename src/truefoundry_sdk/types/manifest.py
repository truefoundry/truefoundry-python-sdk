# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .source import Source
from .framework import Framework
from .model_version_environment import ModelVersionEnvironment
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .chat_prompt_manifest_messages_item import ChatPromptManifestMessagesItem
from .model_configuration import ModelConfiguration


class Manifest_ModelVersion(UniversalBaseModel):
    type: typing.Literal["model-version"] = "model-version"
    name: str
    description: typing.Optional[str] = None
    metadata: typing.Dict[str, typing.Optional[typing.Any]]
    version_alias: typing.Optional[str] = None
    ml_repo: str
    version: typing.Optional[int] = None
    source: Source
    framework: typing.Optional[Framework] = None
    environment: typing.Optional[ModelVersionEnvironment] = None
    step: typing.Optional[int] = None
    run_id: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow


class Manifest_ChatPrompt(UniversalBaseModel):
    type: typing.Literal["chat_prompt"] = "chat_prompt"
    name: str
    description: typing.Optional[str] = None
    metadata: typing.Dict[str, typing.Optional[typing.Any]]
    version_alias: typing.Optional[str] = None
    ml_repo: str
    version: typing.Optional[int] = None
    messages: typing.List[ChatPromptManifestMessagesItem]
    variables: typing.Optional[typing.Dict[str, str]] = None
    model_configuration: ModelConfiguration

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow


class Manifest_ArtifactVersion(UniversalBaseModel):
    type: typing.Literal["artifact-version"] = "artifact-version"
    name: str
    description: typing.Optional[str] = None
    metadata: typing.Dict[str, typing.Optional[typing.Any]]
    version_alias: typing.Optional[str] = None
    ml_repo: str
    version: typing.Optional[int] = None
    source: Source
    step: typing.Optional[int] = None
    run_id: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow


Manifest = typing.Union[Manifest_ModelVersion, Manifest_ChatPrompt, Manifest_ArtifactVersion]
