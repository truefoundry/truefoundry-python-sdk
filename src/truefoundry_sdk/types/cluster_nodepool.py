# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ..core.serialization import FieldMetadata
from .instance_capacity_type import InstanceCapacityType
from .fractional_gpu_info import FractionalGpuInfo
from .nodepool_taint import NodepoolTaint
from .instance_resources import InstanceResources
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class ClusterNodepool(UniversalBaseModel):
    name: str
    description: typing.Optional[str] = None
    instance_types: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="instanceTypes")
    ] = None
    capacity_type: typing_extensions.Annotated[
        typing.Optional[InstanceCapacityType], FieldMetadata(alias="capacityType")
    ] = None
    fractional_gpu_info: typing_extensions.Annotated[
        typing.Optional[FractionalGpuInfo], FieldMetadata(alias="fractionalGpuInfo")
    ] = None
    taints: typing.Optional[typing.List[NodepoolTaint]] = None
    instance_resources: typing_extensions.Annotated[
        typing.Optional[InstanceResources], FieldMetadata(alias="instanceResources")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
