# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
from .cluster_gateway import ClusterGateway
from .cluster_nodepool import ClusterNodepool
import pydantic
from .cluster_autopilot_settings import ClusterAutopilotSettings
from .cluster_auto_scaler_logs_metadata import ClusterAutoScalerLogsMetadata
import datetime as dt
from .cluster_metadata_installed_cr_ds_meta_value import (
    ClusterMetadataInstalledCrDsMetaValue,
)
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ClusterMetadata(UniversalBaseModel):
    managed_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="managedBy")] = None
    kubernetes_version: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="kubernetesVersion")] = (
        None
    )
    gateways: typing.Optional[typing.List[ClusterGateway]] = None
    nodepools: typing.Optional[typing.List[ClusterNodepool]] = None
    region: typing.Optional[str] = pydantic.Field(default=None)
    """
    value of topology.kubernetes.io/region
    """

    autopilot: typing.Optional[ClusterAutopilotSettings] = None
    load_balancer_i_ps: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="loadBalancerIPs")
    ] = None
    log_analytics_metadata: typing_extensions.Annotated[
        typing.Optional[ClusterAutoScalerLogsMetadata],
        FieldMetadata(alias="logAnalyticsMetadata"),
    ] = None
    last_synced_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastSyncedAt")] = (
        None
    )
    node_auto_provisioning_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="nodeAutoProvisioningEnabled")
    ] = None
    image_streaming_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="imageStreamingEnabled")
    ] = None
    last_sync_issues: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="lastSyncIssues")
    ] = None
    sds_server_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="sdsServerURL")] = None
    installed_cr_ds_meta: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, ClusterMetadataInstalledCrDsMetaValue]],
        FieldMetadata(alias="installedCRDsMeta"),
    ] = None
    ssh_server_use_legacy_envoy_filter: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="sshServerUseLegacyEnvoyFilter")
    ] = pydantic.Field(default=None)
    """
    default true when missing
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
