# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from .base_artifact_version import BaseArtifactVersion


class AgentManifest(BaseArtifactVersion):
    type: typing.Literal["agent"] = "agent"
    goal: typing.Optional[str] = pydantic.Field(default=None)
    """
    +sort=100
    +uiType=TextArea
    +label=Goal
    +usage=Short form description. Will be used as `description` when this agent is used as a tool.
    +uiProps={"descriptionInline":true}
    """

    instruction: typing.Optional[str] = pydantic.Field(default=None)
    """
    `instruction` is the system prompt for now. (2.5 * 1024)
    +sort=150
    +uiType=AgentInstructions
    +uiProps={"helpText":"Use the syntax ${Tool FQN} to reference a tool, and ${AGENT FQN} to reference another agent"}
    +label=Instructions
    +usage=Instructions for the agent to follow to achieve the goal
    +uiProps={"descriptionInline":true}
    """

    available_tools: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    +sort=200
    +uiType=Hidden
    +label=Tools
    +usage=Tools available to the agent
    +uiProps={"descriptionInline":true}
    """

    model_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    +sort=300
    +uiType=EnabledModelSelector
    +uiProps={"searchable":true,"modelType":"chat","providerType":"openai"}
    +label=Model
    +usage=Model to use when running the agent
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
