# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
from .deployment_manifest import DeploymentManifest
import typing
import datetime as dt
from .build import Build
from .deployment_status import DeploymentStatus
from .recommendation import Recommendation
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.pydantic_utilities import update_forward_refs


class Deployment(UniversalBaseModel):
    id: str
    version: float
    fqn: str
    application_id: typing_extensions.Annotated[str, FieldMetadata(alias="applicationId")]
    manifest: DeploymentManifest
    application: "Application"
    created_by_subject: typing_extensions.Annotated[
        typing.Dict[str, typing.Optional[typing.Any]],
        FieldMetadata(alias="createdBySubject"),
    ]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    deployment_builds: typing_extensions.Annotated[typing.List[Build], FieldMetadata(alias="deploymentBuilds")]
    deployment_statuses: typing_extensions.Annotated[
        typing.List[DeploymentStatus], FieldMetadata(alias="deploymentStatuses")
    ]
    current_status_id: typing_extensions.Annotated[str, FieldMetadata(alias="currentStatusId")]
    current_status: typing_extensions.Annotated[DeploymentStatus, FieldMetadata(alias="currentStatus")]
    applied_recommendations: typing_extensions.Annotated[
        typing.Optional[typing.List[Recommendation]],
        FieldMetadata(alias="appliedRecommendations"),
    ] = pydantic.Field(default=None)
    """
    Applied recommendations for this deployment
    """

    created_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="createdBy")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow


from .application import Application  # noqa: E402
from .application_debug_info import ApplicationDebugInfo  # noqa: E402

update_forward_refs(Deployment)
