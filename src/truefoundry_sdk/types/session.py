# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import typing
from .session_subject_type import SessionSubjectType
from .user_metadata import UserMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class Session(UniversalBaseModel):
    id: str
    user_name: typing_extensions.Annotated[str, FieldMetadata(alias="userName")]
    subject_slug: typing_extensions.Annotated[str, FieldMetadata(alias="subjectSlug")]
    subject_controller_name: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="subjectControllerName")
    ] = None
    subject_pat_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="subjectPatName")] = None
    email: typing.Optional[str] = None
    subject_type: typing_extensions.Annotated[SessionSubjectType, FieldMetadata(alias="subjectType")]
    tenant_name: typing_extensions.Annotated[str, FieldMetadata(alias="tenantName")]
    roles: typing.List[str]
    teams: typing.List[str]
    metadata: typing.Optional[UserMetadata] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
