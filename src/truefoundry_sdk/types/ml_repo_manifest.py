# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .collaborator import Collaborator
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class MlRepoManifest(UniversalBaseModel):
    """
    MLRepo manifest.
    """

    type: typing.Optional[typing.Literal["ml-repo"]] = None
    name: str = pydantic.Field()
    """
    Name of the ML Repo.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description for the ML Repo.
    """

    storage_integration_fqn: str = pydantic.Field()
    """
    Storage Integration to store artifacts and models. A storage integration represents a connected blob storage like AWS S3 / Azure Blob Storage / Google Cloud Storage.
    """

    collaborators: typing.List[Collaborator] = pydantic.Field()
    """
    Users and Teams that have access to MLRepo
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
