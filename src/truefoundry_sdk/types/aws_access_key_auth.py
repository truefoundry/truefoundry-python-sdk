# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AwsAccessKeyAuth(UniversalBaseModel):
    aws_access_key_id: str = pydantic.Field()
    """
    +label=AWS Access Key ID
    +usage=AWS Access Key ID
    +sort=1
    """

    aws_secret_access_key: str = pydantic.Field()
    """
    +label=AWS Secret Access Key
    +usage=AWS Secret Access Key for the user to authenticate with
    +sort=2
    """

    aws_session_token: typing.Optional[str] = pydantic.Field(default=None)
    """
    +label=AWS Session Token
    +usage=AWS Session Token, only required when using temporary credentials
    +sort=3
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
