# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class XgBoostModelSchema(UniversalBaseModel):
    """
    +label=XGBoost Model Schema
    +usage=Schema of the XGBoost model
    """

    infer_method_name: typing.Literal["predict"] = pydantic.Field(default="predict")
    """
    +label=Inference Method Name
    +usage=Name of the method used for inference
    """

    inputs: typing.List[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field()
    """
    +label= Input Schema
    +usage=Schema of the input
    +uiProps={"descriptionInline":true}
    """

    outputs: typing.List[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field()
    """
    +label= Output Schema
    +usage=Schema of the output
    +uiProps={"descriptionInline":true}
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
