# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from .subject import Subject
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class JobRun(UniversalBaseModel):
    id: str
    name: str
    command: str
    application_id: typing_extensions.Annotated[str, FieldMetadata(alias="applicationId")]
    deployment_version: typing_extensions.Annotated[float, FieldMetadata(alias="deploymentVersion")]
    status: str
    retry_count: typing_extensions.Annotated[float, FieldMetadata(alias="retryCount")]
    start_time: typing_extensions.Annotated[float, FieldMetadata(alias="startTime")]
    completion_time: typing_extensions.Annotated[float, FieldMetadata(alias="completionTime")]
    duration: float
    error: str
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    triggered_by_subject: typing_extensions.Annotated[Subject, FieldMetadata(alias="triggeredBySubject")]
    triggered_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="triggeredBy")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
