# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
from .subject import Subject
from .workspace_metadata import WorkspaceMetadata
import datetime as dt
import typing
from .workspace_manifest import WorkspaceManifest
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ..core.pydantic_utilities import update_forward_refs


class Workspace(UniversalBaseModel):
    id: str
    fqn: str
    name: str
    tenant_name: typing_extensions.Annotated[str, FieldMetadata(alias="tenantName")]
    cluster_id: typing_extensions.Annotated[str, FieldMetadata(alias="clusterId")]
    cluster: "Cluster"
    created_by_subject: typing_extensions.Annotated[Subject, FieldMetadata(alias="createdBySubject")]
    metadata: WorkspaceMetadata
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    k8s_uid: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="k8sUid")] = None
    environment_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="environmentId")] = None
    service_account_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="serviceAccountId")] = (
        None
    )
    manifest: WorkspaceManifest
    is_system_ws: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isSystemWs")] = None
    created_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="createdBy")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow


from .cluster import Cluster  # noqa: E402

update_forward_refs(Workspace)
