# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class Recommendation(UniversalBaseModel):
    id: typing.Optional[str] = None
    cluster_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="clusterId")] = None
    application_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="applicationId")] = None
    deployment_id: typing_extensions.Annotated[str, FieldMetadata(alias="deploymentId")]
    application_version: typing_extensions.Annotated[int, FieldMetadata(alias="applicationVersion")]
    recommendation_data: typing_extensions.Annotated[
        typing.Dict[str, typing.Optional[typing.Any]], FieldMetadata(alias="recommendationData")
    ]
    recommendation_type: typing_extensions.Annotated[str, FieldMetadata(alias="recommendationType")]
    applied_deployment_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="appliedDeploymentId")
    ] = None
    expiry_timestamp: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="expiryTimestamp")]
    created_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdAt")] = None
    updated_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updatedAt")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
