# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CreateDeploymentRequest(UniversalBaseModel):
    manifest: typing.Dict[str, typing.Optional[typing.Any]] = pydantic.Field()
    """
    Manifest of application
    """

    dry_run: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="dryRun")] = pydantic.Field(
        default=None
    )
    """
    Dry run
    """

    force_deploy: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="forceDeploy")] = (
        pydantic.Field(default=None)
    )
    """
    Cancels any ongoing deployments
    """

    workspace_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="workspaceId")] = (
        pydantic.Field(default=None)
    )
    """
    workspace id of the workspace
    """

    application_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="applicationId")] = (
        pydantic.Field(default=None)
    )
    """
    Id of the application
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of application
    """

    application_set_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="applicationSetId")] = (
        pydantic.Field(default=None)
    )
    """
    Application Set Id
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
