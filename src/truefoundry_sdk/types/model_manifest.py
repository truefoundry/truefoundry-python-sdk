# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from .base_artifact_version import BaseArtifactVersion
from .model_manifest_framework import ModelManifestFramework
from .model_manifest_source import ModelManifestSource
from .model_version_environment import ModelVersionEnvironment


class ModelManifest(BaseArtifactVersion):
    """
    +label=Artifact Version
    +usage=Log a new Model Version containing model files and folders with metadata
    """

    type: typing.Literal["model-version"] = "model-version"
    source: typing.Optional[ModelManifestSource] = pydantic.Field(default=None)
    """
    +label=Model Source
    +uiType=Group
    """

    framework: typing.Optional[ModelManifestFramework] = pydantic.Field(default=None)
    """
    +label=Framework
    +usage=Framework for the model version like Transformers, PyTorch, Sklearn, Xgboost etc with framework specific metadata. This will be used to infer model deployment configuration
    +uiProps={"descriptionInline":true}
    """

    environment: typing.Optional[ModelVersionEnvironment] = None
    step: typing.Optional[int] = pydantic.Field(default=0)
    """
    +label=Step
    +usage=Step/Epoch number in an iterative training loop the model version was created. Generally useful when logging a model version from a MLRepo Run
    +uiProps={"descriptionInline":true}
    """

    run_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    +label=Run ID
    +usage=ID of the MLRepo Run that generated the model version
    +uiType=Hidden
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
