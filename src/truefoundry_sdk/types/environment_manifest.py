# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .environment_color import EnvironmentColor
import typing_extensions
from ..core.serialization import FieldMetadata
from .environment_optimize_for import EnvironmentOptimizeFor
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class EnvironmentManifest(UniversalBaseModel):
    type: typing.Literal["environment"] = pydantic.Field(default="environment")
    """
    +value=environment
    """

    name: str = pydantic.Field()
    """
    +sort=100
    +message=3 to 32 lower case characters long alphanumeric word, may contain - in between, cannot start with a number
    +usage=Environment Name
    """

    color: EnvironmentColor
    is_production: typing_extensions.Annotated[bool, FieldMetadata(alias="isProduction")] = pydantic.Field()
    """
    +sort=400
    +label=Environment Type
    +message=Indicates if the environment is for production use
    +uiType=MultiSelectPills
    +uiProps={"hideRadioIcon":true}
    """

    optimize_for: typing_extensions.Annotated[EnvironmentOptimizeFor, FieldMetadata(alias="optimizeFor")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
