# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .library_name import LibraryName
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class TransformersFramework(UniversalBaseModel):
    """
    +label=Transformers
    +icon=transformers
    """

    type: typing.Literal["transformers"] = pydantic.Field(default="transformers")
    """
    +label=Type
    +usage=Type of the framework
    +value=transformers
    """

    library_name: typing.Optional[LibraryName] = pydantic.Field(default=None)
    """
    +label=Library Name
    +usage=Name of the library for the framework
    """

    pipeline_tag: typing.Optional[str] = pydantic.Field(default=None)
    """
    +label=Pipeline Tag
    +usage=The `pipeline()` task this model can be used with e.g. `text-generation`. See [huggingface docs](https://huggingface.co/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline.task) for all possible values
    +uiProps={"descriptionInline":true}
    """

    base_model: typing.Optional[str] = pydantic.Field(default=None)
    """
    +label=Base Model
    +usage=Base model Id from HuggingFace Hub. If this is a finetuned model, this points to the base model id used for finetuning.
    +uiProps={"descriptionInline":true}
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
