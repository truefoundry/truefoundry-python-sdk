# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .docker_file_build_command import DockerFileBuildCommand
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class DockerFileBuild(UniversalBaseModel):
    """
    +docs=Describes that we are using a dockerfile to build our image
    +label=Docker File (I already have Docker File)
    +icon=fa-brands fa-docker:#0db7ed
    """

    type: typing.Literal["dockerfile"] = pydantic.Field(default="dockerfile")
    """
    +value=dockerfile
    """

    dockerfile_path: str = pydantic.Field()
    """
    +label=Path to Dockerfile
    +usage=The file path of the Dockerfile relative to project root path.
    """

    build_context_path: str = pydantic.Field()
    """
    +label=Path to build context
    +usage=Build context path for the Dockerfile relative to project root path.
    """

    command: typing.Optional[DockerFileBuildCommand] = pydantic.Field(default=None)
    """
    +label=Command Override
    +usage=Override the command to run when the container starts
    When deploying a Job, the command can be templatized by defining `params` and referencing them in command
    E.g. `python main.py --learning_rate {{learning_rate}}`
    """

    build_args: typing.Optional[typing.Dict[str, str]] = pydantic.Field(default=None)
    """
    +label=Build arguments to pass to docker build
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
