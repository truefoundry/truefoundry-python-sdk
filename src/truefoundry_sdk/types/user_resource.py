# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class UserResource(UniversalBaseModel):
    resource_type: typing_extensions.Annotated[str, FieldMetadata(alias="resourceType")] = pydantic.Field()
    """
    Resource Type
    """

    resource_id: typing_extensions.Annotated[str, FieldMetadata(alias="resourceId")] = pydantic.Field()
    """
    Resource ID
    """

    role_id: typing_extensions.Annotated[str, FieldMetadata(alias="roleId")] = pydantic.Field()
    """
    Role ID
    """

    resource_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="resourceName")] = (
        pydantic.Field(default=None)
    )
    """
    Resource Name (if available)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
