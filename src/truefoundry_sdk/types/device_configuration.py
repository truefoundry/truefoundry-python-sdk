# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
from .device_configuration_type import DeviceConfigurationType
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class DeviceConfiguration(UniversalBaseModel):
    type: DeviceConfigurationType
    count: int
    device_identifier: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="deviceIdentifier")] = None
    mig_profile: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="migProfile")] = None
    per_instance_gpu_memory: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="perInstanceGpuMemory")
    ] = None
    slices_per_full_gpu: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="slicesPerFullGpu")] = (
        None
    )
    nvidia_device_plugin_config: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="nvidiaDevicePluginConfig")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
