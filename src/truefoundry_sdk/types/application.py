# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
from .application_type import ApplicationType
import typing_extensions
from ..core.serialization import FieldMetadata
from .application_metadata import ApplicationMetadata
from .application_lifecycle_stage import ApplicationLifecycleStage
import datetime as dt
import typing
from .recommendation import Recommendation
import pydantic
from .alert import Alert
from .application_alerts_summary_value import ApplicationAlertsSummaryValue
from .application_problem import ApplicationProblem
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.pydantic_utilities import update_forward_refs


class Application(UniversalBaseModel):
    id: str
    fqn: str
    name: str
    type: ApplicationType
    created_by_subject: typing_extensions.Annotated[str, FieldMetadata(alias="createdBySubject")]
    tenant_name: typing_extensions.Annotated[str, FieldMetadata(alias="tenantName")]
    metadata: ApplicationMetadata
    lifecycle_stage: typing_extensions.Annotated[ApplicationLifecycleStage, FieldMetadata(alias="lifecycleStage")]
    workspace_id: typing_extensions.Annotated[str, FieldMetadata(alias="workspaceId")]
    last_version: typing_extensions.Annotated[int, FieldMetadata(alias="lastVersion")]
    active_version: typing_extensions.Annotated[int, FieldMetadata(alias="activeVersion")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    recommendations: typing.Optional[typing.List[Recommendation]] = pydantic.Field(default=None)
    """
    Recommendations for this application
    """

    alerts: typing.Optional[typing.List[Alert]] = pydantic.Field(default=None)
    """
    Alerts for this application
    """

    alerts_summary: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, ApplicationAlertsSummaryValue]],
        FieldMetadata(alias="alertsSummary"),
    ] = pydantic.Field(default=None)
    """
    Summary of alerts for this application
    """

    application_debug_infos: typing_extensions.Annotated[
        typing.Optional[typing.List["ApplicationDebugInfo"]],
        FieldMetadata(alias="applicationDebugInfos"),
    ] = pydantic.Field(default=None)
    """
    Debug infos for this application
    """

    potential_problems: typing_extensions.Annotated[
        typing.Optional[typing.List[ApplicationProblem]],
        FieldMetadata(alias="potentialProblems"),
    ] = pydantic.Field(default=None)
    """
    Potential problems with the application
    """

    autopilot: typing.Dict[str, typing.Optional[typing.Any]]
    created_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="createdBy")] = None
    deployment: "Deployment"
    active_deployment_id: typing_extensions.Annotated[str, FieldMetadata(alias="activeDeploymentId")]
    last_deployment_id: typing_extensions.Annotated[str, FieldMetadata(alias="lastDeploymentId")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow


from .application_debug_info import ApplicationDebugInfo  # noqa: E402
from .deployment import Deployment  # noqa: E402

update_forward_refs(Application)
