# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class ArtifactsCacheVolume(UniversalBaseModel):
    """
    +docs=Describes the volume that will be used to cache the models
    +label=Artifacts Cache Volume
    """

    storage_class: str = pydantic.Field()
    """
    +label=Storage Class
    +usage=Storage class of the Volume where artifacts will be cached
    """

    cache_size: int = pydantic.Field()
    """
    +label=Cache Size (GB)
    +usage=Size of the Volume (in GB) where artifacts will be cached. Should be greater than twice the size of artifacts getting cached
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
