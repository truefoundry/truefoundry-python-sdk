# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .agent_open_api_tool_with_fqn_openapi_spec import AgentOpenApiToolWithFqnOpenapiSpec
from .method import Method
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AgentOpenApiToolWithFqn(UniversalBaseModel):
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the entity
    """

    description: typing.Optional[str] = None
    metadata: typing.Dict[str, typing.Optional[typing.Any]] = pydantic.Field()
    """
    Key value metadata. Should be valid JSON. For e.g. `{"business-unit": "sales", "quality": "good", "rating": 4.5}`
    """

    version_alias: typing.Optional[str] = pydantic.Field(default=None)
    """
    Version alias is alternate, ideally human readable, version string to reference an artifact version. It should start with `v` followed by alphanumeric and it can include `.` and `-` in between (e.g. `v1.0.0`, `v1-prod`, `v3-dev`, etc)
    """

    ml_repo: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the ML Repo
    """

    version: typing.Optional[int] = pydantic.Field(default=None)
    """
    Version of the entity
    """

    type: typing.Literal["openapi-tool"] = pydantic.Field(default="openapi-tool")
    """
    Type of the agent
    """

    openapi_spec: AgentOpenApiToolWithFqnOpenapiSpec = pydantic.Field()
    """
    OpenAPI Spec for the tool describing the API, endpoints and parameters. [Sample OpenAPI Spec Link](https://assets.production.truefoundry.com/sample-openapi.json)
    """

    base_url: str = pydantic.Field()
    """
    HTTP endpoint where the API is hosted for the tools. E.g. `https://api.example.com/v1`
    """

    path: str = pydantic.Field()
    """
    API Route Path for the tool call HTTP request. E.g. `GET /weather`
    """

    method: Method = pydantic.Field()
    """
    HTTP Method for the tool call HTTP request
    """

    headers: typing.Optional[typing.Dict[str, str]] = pydantic.Field(default=None)
    """
    HTTP Headers for the tool call HTTP request. E.g. `Authorization: Bearer <token>`
    """

    id: str = pydantic.Field()
    """
    ID of the agent tool
    """

    fqn: str = pydantic.Field()
    """
    FQN of the agent tool
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
