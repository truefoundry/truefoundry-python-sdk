# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
from .i_change import IChange
from .addon_component_name import AddonComponentName
import typing_extensions
from ..core.serialization import FieldMetadata
from .status import Status
import typing
from .addon_component_unsupported_cluster_types_item import (
    AddonComponentUnsupportedClusterTypesItem,
)
from .add_on_component_source import AddOnComponentSource
from .upgrade_data import UpgradeData
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AddonComponent(UniversalBaseModel):
    name: AddonComponentName
    app_name: typing_extensions.Annotated[str, FieldMetadata(alias="appName")]
    namespace: str
    application_id: typing_extensions.Annotated[str, FieldMetadata(alias="applicationId")]
    description: str
    path: str
    addon_folder: typing_extensions.Annotated[str, FieldMetadata(alias="addonFolder")]
    installed: bool
    status: Status
    version: str
    manifest: typing.Dict[str, typing.Optional[typing.Any]]
    installation_source: typing_extensions.Annotated[str, FieldMetadata(alias="installationSource")]
    unsupported_cluster_types: typing_extensions.Annotated[
        typing.List[AddonComponentUnsupportedClusterTypesItem],
        FieldMetadata(alias="unsupportedClusterTypes"),
    ]
    required: bool
    known_cr_ds: typing_extensions.Annotated[typing.List[str], FieldMetadata(alias="knownCRDs")]
    source: typing.Optional[AddOnComponentSource] = None
    upgrades: typing.Optional[typing.List[UpgradeData]] = None
    labels: typing.Optional[typing.List[str]] = None
    recommendations: typing.Optional[typing.List[typing.Dict[str, typing.Optional[typing.Any]]]] = pydantic.Field(
        default=None
    )
    """
    Recommendations
    """

    workspace_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="workspaceId")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
