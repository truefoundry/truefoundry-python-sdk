# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .latency_based_load_balance_target import LatencyBasedLoadBalanceTarget
from .load_balancing_when import LoadBalancingWhen


class LatencyBasedLoadBalancingRule(UniversalBaseModel):
    id: str
    when: LoadBalancingWhen
    load_balance_targets: typing.List[LatencyBasedLoadBalanceTarget]
    type: typing.Literal["latency-based-routing"] = "latency-based-routing"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
