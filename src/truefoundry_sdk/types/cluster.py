# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
from .cluster_metadata import ClusterMetadata
from .cluster_manifest import ClusterManifest
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
from .cluster_cloud_provider import ClusterCloudProvider
from .cluster_recommendation_summary import ClusterRecommendationSummary
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ..core.pydantic_utilities import update_forward_refs


class Cluster(UniversalBaseModel):
    id: str
    fqn: str
    name: str
    metadata: ClusterMetadata
    manifest: ClusterManifest
    infra_config: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]],
        FieldMetadata(alias="infraConfig"),
    ] = None
    provisioned: bool
    cloud_provider: typing_extensions.Annotated[ClusterCloudProvider, FieldMetadata(alias="cloudProvider")]
    tenant_name: typing_extensions.Annotated[str, FieldMetadata(alias="tenantName")]
    workspaces: typing.List["Workspace"]
    created_by_subject: typing_extensions.Annotated[
        typing.Dict[str, typing.Optional[typing.Any]],
        FieldMetadata(alias="createdBySubject"),
    ]
    recommendation_summary: typing_extensions.Annotated[
        ClusterRecommendationSummary, FieldMetadata(alias="recommendationSummary")
    ]
    created_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="createdBy")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow


from .workspace import Workspace  # noqa: E402

update_forward_refs(Cluster)
