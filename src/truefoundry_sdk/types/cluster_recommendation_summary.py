# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class ClusterRecommendationSummary(UniversalBaseModel):
    total_upgrades: typing_extensions.Annotated[int, FieldMetadata(alias="totalUpgrades")] = pydantic.Field()
    """
    Total number of upgrades
    """

    total_recommendations: typing_extensions.Annotated[int, FieldMetadata(alias="totalRecommendations")] = (
        pydantic.Field()
    )
    """
    Total number of recommendations
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            smart_union = True
            extra = pydantic.Extra.allow
