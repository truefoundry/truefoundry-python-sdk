# This file was auto-generated by Fern from our API Definition.

import typing
import os
import httpx

from truefoundry_sdk.base_client import AsyncBaseTrueFoundry, BaseTrueFoundry
from truefoundry_sdk._wrapped_clients import (
    WrappedAgentVersionsClient,
    WrappedApplicationsClient,
    WrappedArtifactVersionsClient,
    WrappedAsyncApplicationsClient,
    WrappedAsyncTracingProjectsClient,
    WrappedModelVersionsClient,
    WrappedPromptVersionsClient,
    WrappedToolVersionsClient,
    WrappedTracingProjectsClient,
    WrappedWorkspacesClient,
    WrappedAsyncAgentVersionsClient,
    WrappedAsyncArtifactVersionsClient,
    WrappedAsyncModelVersionsClient,
    WrappedAsyncPromptVersionsClient,
    WrappedAsyncToolVersionsClient,
    WrappedAsyncWorkspacesClient,
)


class TrueFoundry(BaseTrueFoundry):
    def __init__(
        self,
        *,
        base_url: str,
        api_key: typing.Optional[
            typing.Union[str, typing.Callable[[], str]]
        ] = os.getenv("TFY_API_KEY"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        super().__init__(
            base_url=base_url,
            api_key=api_key,
            timeout=timeout,
            follow_redirects=follow_redirects,
            httpx_client=httpx_client,
        )
        self.agent_versions = WrappedAgentVersionsClient(
            client_wrapper=self._client_wrapper
        )
        self.applications = WrappedApplicationsClient(
            client_wrapper=self._client_wrapper
        )
        self.artifact_versions = WrappedArtifactVersionsClient(
            client_wrapper=self._client_wrapper
        )
        self.model_versions = WrappedModelVersionsClient(
            client_wrapper=self._client_wrapper
        )
        self.prompt_versions = WrappedPromptVersionsClient(
            client_wrapper=self._client_wrapper
        )
        self.tool_versions = WrappedToolVersionsClient(
            client_wrapper=self._client_wrapper
        )
        self.tracing_projects = WrappedTracingProjectsClient(
            client_wrapper=self._client_wrapper
        )
        self.workspaces = WrappedWorkspacesClient(
            client_wrapper=self._client_wrapper
        )


class AsyncTrueFoundry(AsyncBaseTrueFoundry):
    def __init__(
        self,
        *,
        base_url: str,
        api_key: typing.Optional[
            typing.Union[str, typing.Callable[[], str]]
        ] = os.getenv("TFY_API_KEY"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        super().__init__(
            base_url=base_url,
            api_key=api_key,
            timeout=timeout,
            follow_redirects=follow_redirects,
            httpx_client=httpx_client,
        )
        self.agent_versions = WrappedAsyncAgentVersionsClient(
            client_wrapper=self._client_wrapper
        )
        self.applications = WrappedAsyncApplicationsClient(
            client_wrapper=self._client_wrapper
        )
        self.artifact_versions = WrappedAsyncArtifactVersionsClient(
            client_wrapper=self._client_wrapper
        )
        self.model_versions = WrappedAsyncModelVersionsClient(
            client_wrapper=self._client_wrapper
        )
        self.prompt_versions = WrappedAsyncPromptVersionsClient(
            client_wrapper=self._client_wrapper
        )
        self.tool_versions = WrappedAsyncToolVersionsClient(
            client_wrapper=self._client_wrapper
        )
        self.tracing_projects = WrappedAsyncTracingProjectsClient(
            client_wrapper=self._client_wrapper
        )
        self.workspaces = WrappedAsyncWorkspacesClient(
            client_wrapper=self._client_wrapper
        )


TrueFoundry.__doc__ = BaseTrueFoundry.__doc__
AsyncTrueFoundry.__doc__ = AsyncBaseTrueFoundry.__doc__
