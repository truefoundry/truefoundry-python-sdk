# This file was auto-generated by Fern from our API Definition.

from ....core.client_wrapper import SyncClientWrapper
from .types.metrics_get_charts_request_filter_entity import (
    MetricsGetChartsRequestFilterEntity,
)
import typing
from ....core.request_options import RequestOptions
from ....types.get_charts_response import GetChartsResponse
from ....core.jsonable_encoder import jsonable_encoder
from ....core.pydantic_utilities import parse_obj_as
from ....errors.bad_request_error import BadRequestError
from ....errors.not_found_error import NotFoundError
from ....errors.method_not_allowed_error import MethodNotAllowedError
from json.decoder import JSONDecodeError
from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper


class MetricsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_charts(
        self,
        workspace_id: str,
        *,
        application_id: str,
        filter_entity: MetricsGetChartsRequestFilterEntity,
        start_ts: typing.Optional[str] = None,
        end_ts: typing.Optional[str] = None,
        filter_query: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetChartsResponse:
        """
        List charts for a given Application based on parameters passed in the query.

        Parameters
        ----------
        workspace_id : str

        application_id : str

        filter_entity : MetricsGetChartsRequestFilterEntity

        start_ts : typing.Optional[str]
            Start Timestamp

        end_ts : typing.Optional[str]
            End Timestamp

        filter_query : typing.Optional[str]
            Query params to filter metrics

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetChartsResponse
            Charts have been successfully retrieved.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry
        from truefoundry_sdk.v1.internal.metrics import (
            MetricsGetChartsRequestFilterEntity,
        )

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.v1.internal.metrics.get_charts(
            workspace_id="workspaceId",
            application_id="applicationId",
            filter_entity=MetricsGetChartsRequestFilterEntity.APPLICATION,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/svc/v1/metrics/{jsonable_encoder(workspace_id)}/charts",
            method="GET",
            params={
                "applicationId": application_id,
                "startTs": start_ts,
                "endTs": end_ts,
                "filterEntity": filter_entity,
                "filterQuery": filter_query,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetChartsResponse,
                    parse_obj_as(
                        type_=GetChartsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncMetricsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_charts(
        self,
        workspace_id: str,
        *,
        application_id: str,
        filter_entity: MetricsGetChartsRequestFilterEntity,
        start_ts: typing.Optional[str] = None,
        end_ts: typing.Optional[str] = None,
        filter_query: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetChartsResponse:
        """
        List charts for a given Application based on parameters passed in the query.

        Parameters
        ----------
        workspace_id : str

        application_id : str

        filter_entity : MetricsGetChartsRequestFilterEntity

        start_ts : typing.Optional[str]
            Start Timestamp

        end_ts : typing.Optional[str]
            End Timestamp

        filter_query : typing.Optional[str]
            Query params to filter metrics

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetChartsResponse
            Charts have been successfully retrieved.

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry
        from truefoundry_sdk.v1.internal.metrics import (
            MetricsGetChartsRequestFilterEntity,
        )

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.v1.internal.metrics.get_charts(
                workspace_id="workspaceId",
                application_id="applicationId",
                filter_entity=MetricsGetChartsRequestFilterEntity.APPLICATION,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/svc/v1/metrics/{jsonable_encoder(workspace_id)}/charts",
            method="GET",
            params={
                "applicationId": application_id,
                "startTs": start_ts,
                "endTs": end_ts,
                "filterEntity": filter_entity,
                "filterQuery": filter_query,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetChartsResponse,
                    parse_obj_as(
                        type_=GetChartsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
