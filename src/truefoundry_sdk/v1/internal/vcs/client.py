# This file was auto-generated by Fern from our API Definition.

import typing
from ....core.client_wrapper import SyncClientWrapper
from ....core.request_options import RequestOptions
from ....types.git_repository_exists_response import GitRepositoryExistsResponse
from ....core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ....core.api_error import ApiError
from ....types.get_authenticated_vcsurl_response import GetAuthenticatedVcsurlResponse
from ....core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class VcsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_repository_details(
        self,
        *,
        repo_url: str,
        id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GitRepositoryExistsResponse:
        """
        Parameters
        ----------
        repo_url : str
            The URL of the repository

        id : typing.Optional[str]
            The integration id of the repository

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GitRepositoryExistsResponse
            Returns git repository details if git repository exists and is accessible

        Examples
        --------
        from truefoundry_sdk import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.v1.internal.vcs.get_repository_details(
            repo_url="repoURL",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/vcs/repository/details",
            method="POST",
            json={
                "repoURL": repo_url,
                "id": id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GitRepositoryExistsResponse,
                    parse_obj_as(
                        type_=GitRepositoryExistsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_authenticated_url(
        self, *, repo_url: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAuthenticatedVcsurlResponse:
        """
        Parameters
        ----------
        repo_url : str
            Repository URL (e.g., https://github.com/user/repo, https://bitbucket.org/user/repo)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAuthenticatedVcsurlResponse
            Returns an authenticated VCS URL for the repository

        Examples
        --------
        from truefoundry_sdk import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.v1.internal.vcs.get_authenticated_url(
            repo_url="repoURL",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/svc/v1/vcs/repository/authenticated-url",
            method="POST",
            json={
                "repoURL": repo_url,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAuthenticatedVcsurlResponse,
                    parse_obj_as(
                        type_=GetAuthenticatedVcsurlResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncVcsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_repository_details(
        self,
        *,
        repo_url: str,
        id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GitRepositoryExistsResponse:
        """
        Parameters
        ----------
        repo_url : str
            The URL of the repository

        id : typing.Optional[str]
            The integration id of the repository

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GitRepositoryExistsResponse
            Returns git repository details if git repository exists and is accessible

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.v1.internal.vcs.get_repository_details(
                repo_url="repoURL",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/vcs/repository/details",
            method="POST",
            json={
                "repoURL": repo_url,
                "id": id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GitRepositoryExistsResponse,
                    parse_obj_as(
                        type_=GitRepositoryExistsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_authenticated_url(
        self, *, repo_url: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAuthenticatedVcsurlResponse:
        """
        Parameters
        ----------
        repo_url : str
            Repository URL (e.g., https://github.com/user/repo, https://bitbucket.org/user/repo)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAuthenticatedVcsurlResponse
            Returns an authenticated VCS URL for the repository

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.v1.internal.vcs.get_authenticated_url(
                repo_url="repoURL",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/svc/v1/vcs/repository/authenticated-url",
            method="POST",
            json={
                "repoURL": repo_url,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAuthenticatedVcsurlResponse,
                    parse_obj_as(
                        type_=GetAuthenticatedVcsurlResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
