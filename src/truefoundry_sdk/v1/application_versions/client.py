# This file was auto-generated by Fern from our API Definition.

from ...core.client_wrapper import SyncClientWrapper
from .raw_client import RawApplicationVersionsClient
import typing
from ...core.request_options import RequestOptions
from ...core.pagination import SyncPager
from ...types.deployment import Deployment
from ...core.jsonable_encoder import jsonable_encoder
from ...types.list_application_deployments_response import ListApplicationDeploymentsResponse
from ...core.pydantic_utilities import parse_obj_as
from ...errors.forbidden_error import ForbiddenError
from ...types.http_error import HttpError
from ...errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...types.get_application_deployment_response import GetApplicationDeploymentResponse
from ...core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawApplicationVersionsClient
from ...core.pagination import AsyncPager


class ApplicationVersionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawApplicationVersionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawApplicationVersionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawApplicationVersionsClient
        """
        return self._raw_client

    def list(
        self,
        id: str,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        version: typing.Optional[str] = None,
        deployment_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[Deployment]:
        """
        Fetch all deployments for a given application ID with optional filters such as deployment ID or version. Supports pagination.

        Parameters
        ----------
        id : str
            Id of the application

        limit : typing.Optional[int]
            Number of items per page

        offset : typing.Optional[int]
            Number of items to skip

        version : typing.Optional[str]
            Deployment version. Filter deployments by version.

        deployment_id : typing.Optional[str]
            Deployment ID. Filter deployments by a specific ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[Deployment]
            List of deployments matching the provided filters.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        response = client.v1.application_versions.list(
            id="id",
            limit=10,
            offset=0,
            version="1",
            deployment_id="deployment123",
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        offset = offset if offset is not None else 1
        _response = self._raw_client._client_wrapper.httpx_client.request(
            f"api/svc/v1/apps/{jsonable_encoder(id)}/deployments",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
                "version": version,
                "deploymentId": deployment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListApplicationDeploymentsResponse,
                    parse_obj_as(
                        type_=ListApplicationDeploymentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list(
                    id,
                    limit=limit,
                    offset=offset + 1,
                    version=version,
                    deployment_id=deployment_id,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        HttpError,
                        parse_obj_as(
                            type_=HttpError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, id: str, deployment_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationDeploymentResponse:
        """
        Get Deployment associated with the provided application ID and deployment ID.

        Parameters
        ----------
        id : str
            Application id of the application

        deployment_id : str
            Deployment id of the deployment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationDeploymentResponse
            Deployment details returned successfully.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.v1.application_versions.get(
            id="id",
            deployment_id="deploymentId",
        )
        """
        response = self._raw_client.get(id, deployment_id, request_options=request_options)
        return response.data


class AsyncApplicationVersionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawApplicationVersionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawApplicationVersionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawApplicationVersionsClient
        """
        return self._raw_client

    async def list(
        self,
        id: str,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        version: typing.Optional[str] = None,
        deployment_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[Deployment]:
        """
        Fetch all deployments for a given application ID with optional filters such as deployment ID or version. Supports pagination.

        Parameters
        ----------
        id : str
            Id of the application

        limit : typing.Optional[int]
            Number of items per page

        offset : typing.Optional[int]
            Number of items to skip

        version : typing.Optional[str]
            Deployment version. Filter deployments by version.

        deployment_id : typing.Optional[str]
            Deployment ID. Filter deployments by a specific ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[Deployment]
            List of deployments matching the provided filters.

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            response = await client.v1.application_versions.list(
                id="id",
                limit=10,
                offset=0,
                version="1",
                deployment_id="deployment123",
            )
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        offset = offset if offset is not None else 1
        _response = await self._raw_client._client_wrapper.httpx_client.request(
            f"api/svc/v1/apps/{jsonable_encoder(id)}/deployments",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
                "version": version,
                "deploymentId": deployment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListApplicationDeploymentsResponse,
                    parse_obj_as(
                        type_=ListApplicationDeploymentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list(
                    id,
                    limit=limit,
                    offset=offset + 1,
                    version=version,
                    deployment_id=deployment_id,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        HttpError,
                        parse_obj_as(
                            type_=HttpError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, id: str, deployment_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationDeploymentResponse:
        """
        Get Deployment associated with the provided application ID and deployment ID.

        Parameters
        ----------
        id : str
            Application id of the application

        deployment_id : str
            Deployment id of the deployment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationDeploymentResponse
            Deployment details returned successfully.

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.v1.application_versions.get(
                id="id",
                deployment_id="deploymentId",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get(id, deployment_id, request_options=request_options)
        return response.data
