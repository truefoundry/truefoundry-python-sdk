# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .agent_versions.client import AgentVersionsClient, AsyncAgentVersionsClient
from .agents.client import AgentsClient, AsyncAgentsClient
from .alerts.client import AlertsClient, AsyncAlertsClient
from .application_versions.client import ApplicationVersionsClient, AsyncApplicationVersionsClient
from .applications.client import ApplicationsClient, AsyncApplicationsClient
from .artifact_versions.client import ArtifactVersionsClient, AsyncArtifactVersionsClient
from .artifacts.client import ArtifactsClient, AsyncArtifactsClient
from .clusters.client import AsyncClustersClient, ClustersClient
from .data_directories.client import AsyncDataDirectoriesClient, DataDirectoriesClient
from .environments.client import AsyncEnvironmentsClient, EnvironmentsClient
from .events.client import AsyncEventsClient, EventsClient
from .internal.client import AsyncInternalClient, InternalClient
from .jobs.client import AsyncJobsClient, JobsClient
from .logs.client import AsyncLogsClient, LogsClient
from .ml_repos.client import AsyncMlReposClient, MlReposClient
from .model_versions.client import AsyncModelVersionsClient, ModelVersionsClient
from .models.client import AsyncModelsClient, ModelsClient
from .personal_access_tokens.client import AsyncPersonalAccessTokensClient, PersonalAccessTokensClient
from .prompt_versions.client import AsyncPromptVersionsClient, PromptVersionsClient
from .prompts.client import AsyncPromptsClient, PromptsClient
from .raw_client import AsyncRawV1Client, RawV1Client
from .secret_groups.client import AsyncSecretGroupsClient, SecretGroupsClient
from .secrets.client import AsyncSecretsClient, SecretsClient
from .teams.client import AsyncTeamsClient, TeamsClient
from .tool_versions.client import AsyncToolVersionsClient, ToolVersionsClient
from .tools.client import AsyncToolsClient, ToolsClient
from .tracing_projects.client import AsyncTracingProjectsClient, TracingProjectsClient
from .users.client import AsyncUsersClient, UsersClient
from .virtual_accounts.client import AsyncVirtualAccountsClient, VirtualAccountsClient
from .workspaces.client import AsyncWorkspacesClient, WorkspacesClient


class V1Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawV1Client(client_wrapper=client_wrapper)
        self.users = UsersClient(client_wrapper=client_wrapper)

        self.teams = TeamsClient(client_wrapper=client_wrapper)

        self.personal_access_tokens = PersonalAccessTokensClient(client_wrapper=client_wrapper)

        self.virtual_accounts = VirtualAccountsClient(client_wrapper=client_wrapper)

        self.secrets = SecretsClient(client_wrapper=client_wrapper)

        self.secret_groups = SecretGroupsClient(client_wrapper=client_wrapper)

        self.clusters = ClustersClient(client_wrapper=client_wrapper)

        self.environments = EnvironmentsClient(client_wrapper=client_wrapper)

        self.applications = ApplicationsClient(client_wrapper=client_wrapper)

        self.application_versions = ApplicationVersionsClient(client_wrapper=client_wrapper)

        self.jobs = JobsClient(client_wrapper=client_wrapper)

        self.workspaces = WorkspacesClient(client_wrapper=client_wrapper)

        self.events = EventsClient(client_wrapper=client_wrapper)

        self.alerts = AlertsClient(client_wrapper=client_wrapper)

        self.logs = LogsClient(client_wrapper=client_wrapper)

        self.ml_repos = MlReposClient(client_wrapper=client_wrapper)

        self.artifacts = ArtifactsClient(client_wrapper=client_wrapper)

        self.agents = AgentsClient(client_wrapper=client_wrapper)

        self.prompts = PromptsClient(client_wrapper=client_wrapper)

        self.tools = ToolsClient(client_wrapper=client_wrapper)

        self.models = ModelsClient(client_wrapper=client_wrapper)

        self.artifact_versions = ArtifactVersionsClient(client_wrapper=client_wrapper)

        self.model_versions = ModelVersionsClient(client_wrapper=client_wrapper)

        self.prompt_versions = PromptVersionsClient(client_wrapper=client_wrapper)

        self.tool_versions = ToolVersionsClient(client_wrapper=client_wrapper)

        self.agent_versions = AgentVersionsClient(client_wrapper=client_wrapper)

        self.data_directories = DataDirectoriesClient(client_wrapper=client_wrapper)

        self.tracing_projects = TracingProjectsClient(client_wrapper=client_wrapper)

        self.internal = InternalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawV1Client:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawV1Client
        """
        return self._raw_client


class AsyncV1Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawV1Client(client_wrapper=client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=client_wrapper)

        self.teams = AsyncTeamsClient(client_wrapper=client_wrapper)

        self.personal_access_tokens = AsyncPersonalAccessTokensClient(client_wrapper=client_wrapper)

        self.virtual_accounts = AsyncVirtualAccountsClient(client_wrapper=client_wrapper)

        self.secrets = AsyncSecretsClient(client_wrapper=client_wrapper)

        self.secret_groups = AsyncSecretGroupsClient(client_wrapper=client_wrapper)

        self.clusters = AsyncClustersClient(client_wrapper=client_wrapper)

        self.environments = AsyncEnvironmentsClient(client_wrapper=client_wrapper)

        self.applications = AsyncApplicationsClient(client_wrapper=client_wrapper)

        self.application_versions = AsyncApplicationVersionsClient(client_wrapper=client_wrapper)

        self.jobs = AsyncJobsClient(client_wrapper=client_wrapper)

        self.workspaces = AsyncWorkspacesClient(client_wrapper=client_wrapper)

        self.events = AsyncEventsClient(client_wrapper=client_wrapper)

        self.alerts = AsyncAlertsClient(client_wrapper=client_wrapper)

        self.logs = AsyncLogsClient(client_wrapper=client_wrapper)

        self.ml_repos = AsyncMlReposClient(client_wrapper=client_wrapper)

        self.artifacts = AsyncArtifactsClient(client_wrapper=client_wrapper)

        self.agents = AsyncAgentsClient(client_wrapper=client_wrapper)

        self.prompts = AsyncPromptsClient(client_wrapper=client_wrapper)

        self.tools = AsyncToolsClient(client_wrapper=client_wrapper)

        self.models = AsyncModelsClient(client_wrapper=client_wrapper)

        self.artifact_versions = AsyncArtifactVersionsClient(client_wrapper=client_wrapper)

        self.model_versions = AsyncModelVersionsClient(client_wrapper=client_wrapper)

        self.prompt_versions = AsyncPromptVersionsClient(client_wrapper=client_wrapper)

        self.tool_versions = AsyncToolVersionsClient(client_wrapper=client_wrapper)

        self.agent_versions = AsyncAgentVersionsClient(client_wrapper=client_wrapper)

        self.data_directories = AsyncDataDirectoriesClient(client_wrapper=client_wrapper)

        self.tracing_projects = AsyncTracingProjectsClient(client_wrapper=client_wrapper)

        self.internal = AsyncInternalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawV1Client:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawV1Client
        """
        return self._raw_client
