# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawV1Client
from .secrets.client import SecretsClient
from .secret_groups.client import SecretGroupsClient
from .clusters.client import ClustersClient
from .environments.client import EnvironmentsClient
from .applications.client import ApplicationsClient
from .application_versions.client import ApplicationVersionsClient
from .jobs.client import JobsClient
from .workspaces.client import WorkspacesClient
from .events.client import EventsClient
from .alerts.client import AlertsClient
from .logs.client import LogsClient
from .ml_repos.client import MlReposClient
from .artifacts.client import ArtifactsClient
from .agents.client import AgentsClient
from .prompts.client import PromptsClient
from .tools.client import ToolsClient
from .models.client import ModelsClient
from .artifact_versions.client import ArtifactVersionsClient
from .model_versions.client import ModelVersionsClient
from .prompt_versions.client import PromptVersionsClient
from .tool_versions.client import ToolVersionsClient
from .agent_versions.client import AgentVersionsClient
from .data_directories.client import DataDirectoriesClient
from .tracing_projects.client import TracingProjectsClient
from .internal.client import InternalClient
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawV1Client
from .secrets.client import AsyncSecretsClient
from .secret_groups.client import AsyncSecretGroupsClient
from .clusters.client import AsyncClustersClient
from .environments.client import AsyncEnvironmentsClient
from .applications.client import AsyncApplicationsClient
from .application_versions.client import AsyncApplicationVersionsClient
from .jobs.client import AsyncJobsClient
from .workspaces.client import AsyncWorkspacesClient
from .events.client import AsyncEventsClient
from .alerts.client import AsyncAlertsClient
from .logs.client import AsyncLogsClient
from .ml_repos.client import AsyncMlReposClient
from .artifacts.client import AsyncArtifactsClient
from .agents.client import AsyncAgentsClient
from .prompts.client import AsyncPromptsClient
from .tools.client import AsyncToolsClient
from .models.client import AsyncModelsClient
from .artifact_versions.client import AsyncArtifactVersionsClient
from .model_versions.client import AsyncModelVersionsClient
from .prompt_versions.client import AsyncPromptVersionsClient
from .tool_versions.client import AsyncToolVersionsClient
from .agent_versions.client import AsyncAgentVersionsClient
from .data_directories.client import AsyncDataDirectoriesClient
from .tracing_projects.client import AsyncTracingProjectsClient
from .internal.client import AsyncInternalClient


class V1Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawV1Client(client_wrapper=client_wrapper)
        self.secrets = SecretsClient(client_wrapper=client_wrapper)

        self.secret_groups = SecretGroupsClient(client_wrapper=client_wrapper)

        self.clusters = ClustersClient(client_wrapper=client_wrapper)

        self.environments = EnvironmentsClient(client_wrapper=client_wrapper)

        self.applications = ApplicationsClient(client_wrapper=client_wrapper)

        self.application_versions = ApplicationVersionsClient(client_wrapper=client_wrapper)

        self.jobs = JobsClient(client_wrapper=client_wrapper)

        self.workspaces = WorkspacesClient(client_wrapper=client_wrapper)

        self.events = EventsClient(client_wrapper=client_wrapper)

        self.alerts = AlertsClient(client_wrapper=client_wrapper)

        self.logs = LogsClient(client_wrapper=client_wrapper)

        self.ml_repos = MlReposClient(client_wrapper=client_wrapper)

        self.artifacts = ArtifactsClient(client_wrapper=client_wrapper)

        self.agents = AgentsClient(client_wrapper=client_wrapper)

        self.prompts = PromptsClient(client_wrapper=client_wrapper)

        self.tools = ToolsClient(client_wrapper=client_wrapper)

        self.models = ModelsClient(client_wrapper=client_wrapper)

        self.artifact_versions = ArtifactVersionsClient(client_wrapper=client_wrapper)

        self.model_versions = ModelVersionsClient(client_wrapper=client_wrapper)

        self.prompt_versions = PromptVersionsClient(client_wrapper=client_wrapper)

        self.tool_versions = ToolVersionsClient(client_wrapper=client_wrapper)

        self.agent_versions = AgentVersionsClient(client_wrapper=client_wrapper)

        self.data_directories = DataDirectoriesClient(client_wrapper=client_wrapper)

        self.tracing_projects = TracingProjectsClient(client_wrapper=client_wrapper)

        self.internal = InternalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawV1Client:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawV1Client
        """
        return self._raw_client


class AsyncV1Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawV1Client(client_wrapper=client_wrapper)
        self.secrets = AsyncSecretsClient(client_wrapper=client_wrapper)

        self.secret_groups = AsyncSecretGroupsClient(client_wrapper=client_wrapper)

        self.clusters = AsyncClustersClient(client_wrapper=client_wrapper)

        self.environments = AsyncEnvironmentsClient(client_wrapper=client_wrapper)

        self.applications = AsyncApplicationsClient(client_wrapper=client_wrapper)

        self.application_versions = AsyncApplicationVersionsClient(client_wrapper=client_wrapper)

        self.jobs = AsyncJobsClient(client_wrapper=client_wrapper)

        self.workspaces = AsyncWorkspacesClient(client_wrapper=client_wrapper)

        self.events = AsyncEventsClient(client_wrapper=client_wrapper)

        self.alerts = AsyncAlertsClient(client_wrapper=client_wrapper)

        self.logs = AsyncLogsClient(client_wrapper=client_wrapper)

        self.ml_repos = AsyncMlReposClient(client_wrapper=client_wrapper)

        self.artifacts = AsyncArtifactsClient(client_wrapper=client_wrapper)

        self.agents = AsyncAgentsClient(client_wrapper=client_wrapper)

        self.prompts = AsyncPromptsClient(client_wrapper=client_wrapper)

        self.tools = AsyncToolsClient(client_wrapper=client_wrapper)

        self.models = AsyncModelsClient(client_wrapper=client_wrapper)

        self.artifact_versions = AsyncArtifactVersionsClient(client_wrapper=client_wrapper)

        self.model_versions = AsyncModelVersionsClient(client_wrapper=client_wrapper)

        self.prompt_versions = AsyncPromptVersionsClient(client_wrapper=client_wrapper)

        self.tool_versions = AsyncToolVersionsClient(client_wrapper=client_wrapper)

        self.agent_versions = AsyncAgentVersionsClient(client_wrapper=client_wrapper)

        self.data_directories = AsyncDataDirectoriesClient(client_wrapper=client_wrapper)

        self.tracing_projects = AsyncTracingProjectsClient(client_wrapper=client_wrapper)

        self.internal = AsyncInternalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawV1Client:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawV1Client
        """
        return self._raw_client
