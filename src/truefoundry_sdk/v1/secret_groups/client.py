# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from .raw_client import RawSecretGroupsClient
from ...core.request_options import RequestOptions
from ...core.pagination import SyncPager
from ...types.secret_group import SecretGroup
from ...types.list_secret_group_response import ListSecretGroupResponse
from ...core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...types.secret_input import SecretInput
from ...types.get_secret_group_response import GetSecretGroupResponse
from ...types.update_secret_dto import UpdateSecretDto
from ...types.delete_secret_group_response import DeleteSecretGroupResponse
from ...types.secret import Secret
from ...core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawSecretGroupsClient
from ...core.pagination import AsyncPager

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SecretGroupsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSecretGroupsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSecretGroupsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSecretGroupsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        secret_group_id: typing.Optional[str] = None,
        secret_group_fqn: typing.Optional[str] = None,
        secret_attributes: typing.Optional[str] = None,
        secret_group_attributes: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[SecretGroup]:
        """
        List the secret groups associated with a user along with the associated secrets for each group. Filtered with the options passed in the query fields.

        Parameters
        ----------
        limit : typing.Optional[int]
            Number of items per page

        offset : typing.Optional[int]
            Number of items to skip

        secret_group_id : typing.Optional[str]
            Secret Group Id of secret group.

        secret_group_fqn : typing.Optional[str]
            Fqn of secret group.

        secret_attributes : typing.Optional[str]
            Attributes to return for secret object provided as comma separated values (`secretAttributes=id,fqn`)

        secret_group_attributes : typing.Optional[str]
            Attributes returned for secret group object provided as comma separated values (`secretGroupAttributes=id,fqn`)

        search : typing.Optional[str]
            Search query - filters by secret group names that contain the search string

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[SecretGroup]
            Returns all the secret groups associated with a user along with the associated secrets for each group.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        response = client.v1.secret_groups.list(
            limit=10,
            offset=0,
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        offset = offset if offset is not None else 0
        _response = self._raw_client._client_wrapper.httpx_client.request(
            "api/svc/v1/secret-groups",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
                "secretGroupId": secret_group_id,
                "secretGroupFqn": secret_group_fqn,
                "secretAttributes": secret_attributes,
                "secretGroupAttributes": secret_group_attributes,
                "search": search,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListSecretGroupResponse,
                    parse_obj_as(
                        type_=ListSecretGroupResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list(
                    limit=limit,
                    offset=offset + 1,
                    secret_group_id=secret_group_id,
                    secret_group_fqn=secret_group_fqn,
                    secret_attributes=secret_attributes,
                    secret_group_attributes=secret_group_attributes,
                    search=search,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        name: str,
        integration_id: str,
        secrets: typing.Sequence[SecretInput],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetSecretGroupResponse:
        """
        Creates a secret group with secrets in it. A secret version for each of the created secret is created with version number as 1. The returned secret group does not have any secrets in the <em>associatedSecrets</em> field. A separate API call should be made to fetch the associated secrets.

        Parameters
        ----------
        name : str
            Name of the secret group.

        integration_id : str
            Id of the provider integration.

        secrets : typing.Sequence[SecretInput]
            The secrets to be associated with the secret group

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSecretGroupResponse
            Returns the created secret group without the associated secrets.

        Examples
        --------
        from truefoundry_sdk import SecretInput, TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.v1.secret_groups.create(
            name="name",
            integration_id="integrationId",
            secrets=[
                SecretInput(
                    key="key",
                    value="value",
                )
            ],
        )
        """
        response = self._raw_client.create(
            name=name, integration_id=integration_id, secrets=secrets, request_options=request_options
        )
        return response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetSecretGroupResponse:
        """
        Get Secret Group associated with provided secretGroup id

        Parameters
        ----------
        id : str
            Secret Id of the secret group.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSecretGroupResponse
            Returns the Secret Group associated with provided secretGroup id

        Examples
        --------
        from truefoundry_sdk import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.v1.secret_groups.get(
            id="id",
        )
        """
        response = self._raw_client.get(id, request_options=request_options)
        return response.data

    def update(
        self,
        id: str,
        *,
        secrets: typing.Sequence[UpdateSecretDto],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetSecretGroupResponse:
        """
        Updates the secrets in a secret group with new values. A new secret version is created for every secret that has a modified value. Returns the updated secret group. The returned secret group does not have any secrets in the <em>associatedSecrets</em> field. A separate API call should be made to fetch the associated secrets.

        Parameters
        ----------
        id : str
            Secret Id of the secret group.

        secrets : typing.Sequence[UpdateSecretDto]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSecretGroupResponse
            Returns the updated secret group without associated secrets.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry, UpdateSecretDto

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.v1.secret_groups.update(
            id="id",
            secrets=[
                UpdateSecretDto(
                    key="key",
                    value="value",
                )
            ],
        )
        """
        response = self._raw_client.update(id, secrets=secrets, request_options=request_options)
        return response.data

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> DeleteSecretGroupResponse:
        """
        Deletes the secret group, its associated secrets and secret versions of those secrets.

        Parameters
        ----------
        id : str
            Secret Id of the secret group.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteSecretGroupResponse
            Deletes Secret Group.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.v1.secret_groups.delete(
            id="id",
        )
        """
        response = self._raw_client.delete(id, request_options=request_options)
        return response.data

    def list_secrets(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Secret]:
        """
        List Secrets associated with a Secret Group.

        Parameters
        ----------
        id : str
            Secret Id of the secret group.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Secret]
            Returns the secrets associated with a secret group.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.v1.secret_groups.list_secrets(
            id="id",
        )
        """
        response = self._raw_client.list_secrets(id, request_options=request_options)
        return response.data


class AsyncSecretGroupsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSecretGroupsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSecretGroupsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSecretGroupsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        secret_group_id: typing.Optional[str] = None,
        secret_group_fqn: typing.Optional[str] = None,
        secret_attributes: typing.Optional[str] = None,
        secret_group_attributes: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[SecretGroup]:
        """
        List the secret groups associated with a user along with the associated secrets for each group. Filtered with the options passed in the query fields.

        Parameters
        ----------
        limit : typing.Optional[int]
            Number of items per page

        offset : typing.Optional[int]
            Number of items to skip

        secret_group_id : typing.Optional[str]
            Secret Group Id of secret group.

        secret_group_fqn : typing.Optional[str]
            Fqn of secret group.

        secret_attributes : typing.Optional[str]
            Attributes to return for secret object provided as comma separated values (`secretAttributes=id,fqn`)

        secret_group_attributes : typing.Optional[str]
            Attributes returned for secret group object provided as comma separated values (`secretGroupAttributes=id,fqn`)

        search : typing.Optional[str]
            Search query - filters by secret group names that contain the search string

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[SecretGroup]
            Returns all the secret groups associated with a user along with the associated secrets for each group.

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            response = await client.v1.secret_groups.list(
                limit=10,
                offset=0,
            )
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        offset = offset if offset is not None else 0
        _response = await self._raw_client._client_wrapper.httpx_client.request(
            "api/svc/v1/secret-groups",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
                "secretGroupId": secret_group_id,
                "secretGroupFqn": secret_group_fqn,
                "secretAttributes": secret_attributes,
                "secretGroupAttributes": secret_group_attributes,
                "search": search,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListSecretGroupResponse,
                    parse_obj_as(
                        type_=ListSecretGroupResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list(
                    limit=limit,
                    offset=offset + 1,
                    secret_group_id=secret_group_id,
                    secret_group_fqn=secret_group_fqn,
                    secret_attributes=secret_attributes,
                    secret_group_attributes=secret_group_attributes,
                    search=search,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        name: str,
        integration_id: str,
        secrets: typing.Sequence[SecretInput],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetSecretGroupResponse:
        """
        Creates a secret group with secrets in it. A secret version for each of the created secret is created with version number as 1. The returned secret group does not have any secrets in the <em>associatedSecrets</em> field. A separate API call should be made to fetch the associated secrets.

        Parameters
        ----------
        name : str
            Name of the secret group.

        integration_id : str
            Id of the provider integration.

        secrets : typing.Sequence[SecretInput]
            The secrets to be associated with the secret group

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSecretGroupResponse
            Returns the created secret group without the associated secrets.

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry, SecretInput

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.v1.secret_groups.create(
                name="name",
                integration_id="integrationId",
                secrets=[
                    SecretInput(
                        key="key",
                        value="value",
                    )
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create(
            name=name, integration_id=integration_id, secrets=secrets, request_options=request_options
        )
        return response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetSecretGroupResponse:
        """
        Get Secret Group associated with provided secretGroup id

        Parameters
        ----------
        id : str
            Secret Id of the secret group.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSecretGroupResponse
            Returns the Secret Group associated with provided secretGroup id

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.v1.secret_groups.get(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get(id, request_options=request_options)
        return response.data

    async def update(
        self,
        id: str,
        *,
        secrets: typing.Sequence[UpdateSecretDto],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetSecretGroupResponse:
        """
        Updates the secrets in a secret group with new values. A new secret version is created for every secret that has a modified value. Returns the updated secret group. The returned secret group does not have any secrets in the <em>associatedSecrets</em> field. A separate API call should be made to fetch the associated secrets.

        Parameters
        ----------
        id : str
            Secret Id of the secret group.

        secrets : typing.Sequence[UpdateSecretDto]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSecretGroupResponse
            Returns the updated secret group without associated secrets.

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry, UpdateSecretDto

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.v1.secret_groups.update(
                id="id",
                secrets=[
                    UpdateSecretDto(
                        key="key",
                        value="value",
                    )
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.update(id, secrets=secrets, request_options=request_options)
        return response.data

    async def delete(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteSecretGroupResponse:
        """
        Deletes the secret group, its associated secrets and secret versions of those secrets.

        Parameters
        ----------
        id : str
            Secret Id of the secret group.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteSecretGroupResponse
            Deletes Secret Group.

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.v1.secret_groups.delete(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.delete(id, request_options=request_options)
        return response.data

    async def list_secrets(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Secret]:
        """
        List Secrets associated with a Secret Group.

        Parameters
        ----------
        id : str
            Secret Id of the secret group.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Secret]
            Returns the secrets associated with a secret group.

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.v1.secret_groups.list_secrets(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.list_secrets(id, request_options=request_options)
        return response.data
