# This file was auto-generated by Fern from our API Definition.

from ...core.client_wrapper import SyncClientWrapper
import typing
from ...core.request_options import RequestOptions
from .types.applications_get_pod_template_hash_deployment_version_map_response import (
    ApplicationsGetPodTemplateHashDeploymentVersionMapResponse,
)
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pydantic_utilities import parse_obj_as
from ...errors.bad_request_error import BadRequestError
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper


class ApplicationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_pod_template_hash_deployment_version_map(
        self,
        application_id: str,
        *,
        pod_template_hashes: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApplicationsGetPodTemplateHashDeploymentVersionMapResponse:
        """
        This endpoint fetches the pod template hash to deployment version map for a specific application.

        Parameters
        ----------
        application_id : str
            Application Id of the application

        pod_template_hashes : str
            Pod Template Hashes (comma separated for multiple)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApplicationsGetPodTemplateHashDeploymentVersionMapResponse
            Successfully retrieved the pod template hash to deployment version map.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry

        client = TrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.v1.applications.get_pod_template_hash_deployment_version_map(
            application_id="applicationId",
            pod_template_hashes="podTemplateHashes",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/svc/v1/apps/{jsonable_encoder(application_id)}/pod-template-hash-deployment-version-map",
            method="GET",
            params={
                "podTemplateHashes": pod_template_hashes,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApplicationsGetPodTemplateHashDeploymentVersionMapResponse,
                    parse_obj_as(
                        type_=ApplicationsGetPodTemplateHashDeploymentVersionMapResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncApplicationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_pod_template_hash_deployment_version_map(
        self,
        application_id: str,
        *,
        pod_template_hashes: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApplicationsGetPodTemplateHashDeploymentVersionMapResponse:
        """
        This endpoint fetches the pod template hash to deployment version map for a specific application.

        Parameters
        ----------
        application_id : str
            Application Id of the application

        pod_template_hashes : str
            Pod Template Hashes (comma separated for multiple)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApplicationsGetPodTemplateHashDeploymentVersionMapResponse
            Successfully retrieved the pod template hash to deployment version map.

        Examples
        --------
        import asyncio

        from truefoundry_sdk import AsyncTrueFoundry

        client = AsyncTrueFoundry(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.v1.applications.get_pod_template_hash_deployment_version_map(
                application_id="applicationId",
                pod_template_hashes="podTemplateHashes",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/svc/v1/apps/{jsonable_encoder(application_id)}/pod-template-hash-deployment-version-map",
            method="GET",
            params={
                "podTemplateHashes": pod_template_hashes,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApplicationsGetPodTemplateHashDeploymentVersionMapResponse,
                    parse_obj_as(
                        type_=ApplicationsGetPodTemplateHashDeploymentVersionMapResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
