# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.pagination import AsyncPager, SyncPager
from ...core.request_options import RequestOptions
from ...types.activate_user_response import ActivateUserResponse
from ...types.deactivate_user_response import DeactivateUserResponse
from ...types.get_user_response import GetUserResponse
from ...types.invite_user_response import InviteUserResponse
from ...types.update_user_roles_response import UpdateUserRolesResponse
from ...types.user import User
from .raw_client import AsyncRawUsersClient, RawUsersClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUsersClient
        """
        return self._raw_client

    def list(
        self,
        *,
        limit: typing.Optional[int] = 100,
        offset: typing.Optional[int] = 0,
        query: typing.Optional[str] = None,
        show_invalid_users: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[User]:
        """
        List all users of tenant filtered by query and showInvalidUsers. Pagination is available based on query parameters.

        Parameters
        ----------
        limit : typing.Optional[int]
            Number of items per page

        offset : typing.Optional[int]
            Number of items to skip

        query : typing.Optional[str]

        show_invalid_users : typing.Optional[bool]
            Show Deactivated users

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[User]
            Returns all users of tenant and also the response includes paginated data.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry
        client = TrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        response = client.v1.users.list(limit=10, offset=0, )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        _response = self._raw_client.list(
            limit=limit,
            offset=offset,
            query=query,
            show_invalid_users=show_invalid_users,
            request_options=request_options,
        )
        return _response.data

    def update_roles(
        self, *, email: str, roles: typing.Sequence[str], request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateUserRolesResponse:
        """
        This endpoint allows tenant administrators to update the roles of a user within their tenant.

        Parameters
        ----------
        email : str
            Email of the user

        roles : typing.Sequence[str]
            Roles for the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateUserRolesResponse
            The user roles have been successfully updated.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry
        client = TrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        client.v1.users.update_roles(email='email', roles=['roles'], )
        """
        _response = self._raw_client.update_roles(email=email, roles=roles, request_options=request_options)
        return _response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetUserResponse:
        """
        Get User associated with provided User id

        Parameters
        ----------
        id : str
            User Id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserResponse
            Returns the User associated with provided User id

        Examples
        --------
        from truefoundry_sdk import TrueFoundry
        client = TrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        client.v1.users.get(id='id', )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def invite_user(
        self, *, accept_invite_client_url: str, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> InviteUserResponse:
        """
        Invite a user to the tenant

        Parameters
        ----------
        accept_invite_client_url : str
            Url to redirect when invite is accepted

        email : str
            Email of user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InviteUserResponse
            User has been successfully invited.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry
        client = TrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        client.v1.users.invite_user(accept_invite_client_url='<control plane url>/invite-accept', email='email', )
        """
        _response = self._raw_client.invite_user(
            accept_invite_client_url=accept_invite_client_url, email=email, request_options=request_options
        )
        return _response.data

    def deactivate(
        self, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeactivateUserResponse:
        """
        Deactivate user associated with the provided email within the tenant.

        Parameters
        ----------
        email : str
            Email of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeactivateUserResponse
            User has been successfully deactivated.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry
        client = TrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        client.v1.users.deactivate(email='email', )
        """
        _response = self._raw_client.deactivate(email=email, request_options=request_options)
        return _response.data

    def activate(self, *, email: str, request_options: typing.Optional[RequestOptions] = None) -> ActivateUserResponse:
        """
        Activate user associated with the provided email within the tenant.

        Parameters
        ----------
        email : str
            Email of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivateUserResponse
            User has been successfully activated.

        Examples
        --------
        from truefoundry_sdk import TrueFoundry
        client = TrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        client.v1.users.activate(email='email', )
        """
        _response = self._raw_client.activate(email=email, request_options=request_options)
        return _response.data


class AsyncUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUsersClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        limit: typing.Optional[int] = 100,
        offset: typing.Optional[int] = 0,
        query: typing.Optional[str] = None,
        show_invalid_users: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[User]:
        """
        List all users of tenant filtered by query and showInvalidUsers. Pagination is available based on query parameters.

        Parameters
        ----------
        limit : typing.Optional[int]
            Number of items per page

        offset : typing.Optional[int]
            Number of items to skip

        query : typing.Optional[str]

        show_invalid_users : typing.Optional[bool]
            Show Deactivated users

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[User]
            Returns all users of tenant and also the response includes paginated data.

        Examples
        --------
        from truefoundry_sdk import AsyncTrueFoundry
        import asyncio
        client = AsyncTrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            response = await client.v1.users.list(limit=10, offset=0, )
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page
        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            limit=limit,
            offset=offset,
            query=query,
            show_invalid_users=show_invalid_users,
            request_options=request_options,
        )
        return _response.data

    async def update_roles(
        self, *, email: str, roles: typing.Sequence[str], request_options: typing.Optional[RequestOptions] = None
    ) -> UpdateUserRolesResponse:
        """
        This endpoint allows tenant administrators to update the roles of a user within their tenant.

        Parameters
        ----------
        email : str
            Email of the user

        roles : typing.Sequence[str]
            Roles for the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateUserRolesResponse
            The user roles have been successfully updated.

        Examples
        --------
        from truefoundry_sdk import AsyncTrueFoundry
        import asyncio
        client = AsyncTrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.v1.users.update_roles(email='email', roles=['roles'], )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_roles(email=email, roles=roles, request_options=request_options)
        return _response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetUserResponse:
        """
        Get User associated with provided User id

        Parameters
        ----------
        id : str
            User Id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserResponse
            Returns the User associated with provided User id

        Examples
        --------
        from truefoundry_sdk import AsyncTrueFoundry
        import asyncio
        client = AsyncTrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.v1.users.get(id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def invite_user(
        self, *, accept_invite_client_url: str, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> InviteUserResponse:
        """
        Invite a user to the tenant

        Parameters
        ----------
        accept_invite_client_url : str
            Url to redirect when invite is accepted

        email : str
            Email of user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InviteUserResponse
            User has been successfully invited.

        Examples
        --------
        from truefoundry_sdk import AsyncTrueFoundry
        import asyncio
        client = AsyncTrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.v1.users.invite_user(accept_invite_client_url='<control plane url>/invite-accept', email='email', )
        asyncio.run(main())
        """
        _response = await self._raw_client.invite_user(
            accept_invite_client_url=accept_invite_client_url, email=email, request_options=request_options
        )
        return _response.data

    async def deactivate(
        self, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeactivateUserResponse:
        """
        Deactivate user associated with the provided email within the tenant.

        Parameters
        ----------
        email : str
            Email of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeactivateUserResponse
            User has been successfully deactivated.

        Examples
        --------
        from truefoundry_sdk import AsyncTrueFoundry
        import asyncio
        client = AsyncTrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.v1.users.deactivate(email='email', )
        asyncio.run(main())
        """
        _response = await self._raw_client.deactivate(email=email, request_options=request_options)
        return _response.data

    async def activate(
        self, *, email: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ActivateUserResponse:
        """
        Activate user associated with the provided email within the tenant.

        Parameters
        ----------
        email : str
            Email of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivateUserResponse
            User has been successfully activated.

        Examples
        --------
        from truefoundry_sdk import AsyncTrueFoundry
        import asyncio
        client = AsyncTrueFoundry(api_key="YOUR_API_KEY", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.v1.users.activate(email='email', )
        asyncio.run(main())
        """
        _response = await self._raw_client.activate(email=email, request_options=request_options)
        return _response.data
